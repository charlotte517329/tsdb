// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Datas {

namespace {

const ::google::protobuf::Descriptor* DataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteNewDatasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteNewDatasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteNewDatasQuery_WriteDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteNewDatasQuery_WriteDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteNewDatasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteNewDatasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadNewDatasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadNewDatasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadNewDatasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadNewDatasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDatasNumQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDatasNumQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDatasNumReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDatasNumReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDatasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDatasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDatasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDatasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteOldDatasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteOldDatasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteOldDatasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteOldDatasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDatasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDatasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDatasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDatasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataFileNumsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataFileNumsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataFileNumsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataFileNumsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFileInfosQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFileInfosQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFileInfosReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFileInfosReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFileInfosReply_DataFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFileInfosReply_DataFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFileQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFileQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFileReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFileReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFileQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFileQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFileReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFileReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RebuildIndexQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebuildIndexQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RebuildIndexReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebuildIndexReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datas_2eproto() {
  protobuf_AddDesc_datas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datas.proto");
  GOOGLE_CHECK(file != NULL);
  DataInfo_descriptor_ = file->message_type(0);
  static const int DataInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, data_),
  };
  DataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataInfo_descriptor_,
      DataInfo::default_instance_,
      DataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataInfo));
  WriteNewDatasQuery_descriptor_ = file->message_type(1);
  static const int WriteNewDatasQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery, data_infos_),
  };
  WriteNewDatasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteNewDatasQuery_descriptor_,
      WriteNewDatasQuery::default_instance_,
      WriteNewDatasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteNewDatasQuery));
  WriteNewDatasQuery_WriteDataInfo_descriptor_ = WriteNewDatasQuery_descriptor_->nested_type(0);
  static const int WriteNewDatasQuery_WriteDataInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, data_),
  };
  WriteNewDatasQuery_WriteDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteNewDatasQuery_WriteDataInfo_descriptor_,
      WriteNewDatasQuery_WriteDataInfo::default_instance_,
      WriteNewDatasQuery_WriteDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasQuery_WriteDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteNewDatasQuery_WriteDataInfo));
  WriteNewDatasReply_descriptor_ = file->message_type(2);
  static const int WriteNewDatasReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasReply, num_),
  };
  WriteNewDatasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteNewDatasReply_descriptor_,
      WriteNewDatasReply::default_instance_,
      WriteNewDatasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteNewDatasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteNewDatasReply));
  ReadNewDatasQuery_descriptor_ = file->message_type(3);
  static const int ReadNewDatasQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasQuery, ids_),
  };
  ReadNewDatasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadNewDatasQuery_descriptor_,
      ReadNewDatasQuery::default_instance_,
      ReadNewDatasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadNewDatasQuery));
  ReadNewDatasReply_descriptor_ = file->message_type(4);
  static const int ReadNewDatasReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasReply, data_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasReply, num_),
  };
  ReadNewDatasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadNewDatasReply_descriptor_,
      ReadNewDatasReply::default_instance_,
      ReadNewDatasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadNewDatasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadNewDatasReply));
  ReadDatasNumQuery_descriptor_ = file->message_type(5);
  static const int ReadDatasNumQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumQuery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumQuery, time_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumQuery, time_end_),
  };
  ReadDatasNumQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDatasNumQuery_descriptor_,
      ReadDatasNumQuery::default_instance_,
      ReadDatasNumQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDatasNumQuery));
  ReadDatasNumReply_descriptor_ = file->message_type(6);
  static const int ReadDatasNumReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumReply, num_),
  };
  ReadDatasNumReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDatasNumReply_descriptor_,
      ReadDatasNumReply::default_instance_,
      ReadDatasNumReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasNumReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDatasNumReply));
  ReadDatasQuery_descriptor_ = file->message_type(7);
  static const int ReadDatasQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, time_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, time_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, from_time_),
  };
  ReadDatasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDatasQuery_descriptor_,
      ReadDatasQuery::default_instance_,
      ReadDatasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDatasQuery));
  ReadDatasReply_descriptor_ = file->message_type(8);
  static const int ReadDatasReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasReply, data_infos_),
  };
  ReadDatasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDatasReply_descriptor_,
      ReadDatasReply::default_instance_,
      ReadDatasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDatasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDatasReply));
  WriteOldDatasQuery_descriptor_ = file->message_type(9);
  static const int WriteOldDatasQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasQuery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasQuery, data_infos_),
  };
  WriteOldDatasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteOldDatasQuery_descriptor_,
      WriteOldDatasQuery::default_instance_,
      WriteOldDatasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteOldDatasQuery));
  WriteOldDatasReply_descriptor_ = file->message_type(10);
  static const int WriteOldDatasReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasReply, num_),
  };
  WriteOldDatasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteOldDatasReply_descriptor_,
      WriteOldDatasReply::default_instance_,
      WriteOldDatasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteOldDatasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteOldDatasReply));
  RemoveDatasQuery_descriptor_ = file->message_type(11);
  static const int RemoveDatasQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasQuery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasQuery, time_stamps_),
  };
  RemoveDatasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDatasQuery_descriptor_,
      RemoveDatasQuery::default_instance_,
      RemoveDatasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDatasQuery));
  RemoveDatasReply_descriptor_ = file->message_type(12);
  static const int RemoveDatasReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasReply, err_),
  };
  RemoveDatasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDatasReply_descriptor_,
      RemoveDatasReply::default_instance_,
      RemoveDatasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDatasReply));
  GetDataFileNumsQuery_descriptor_ = file->message_type(13);
  static const int GetDataFileNumsQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsQuery, unused_),
  };
  GetDataFileNumsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataFileNumsQuery_descriptor_,
      GetDataFileNumsQuery::default_instance_,
      GetDataFileNumsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataFileNumsQuery));
  GetDataFileNumsReply_descriptor_ = file->message_type(14);
  static const int GetDataFileNumsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsReply, num_),
  };
  GetDataFileNumsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataFileNumsReply_descriptor_,
      GetDataFileNumsReply::default_instance_,
      GetDataFileNumsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataFileNumsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataFileNumsReply));
  DataFileInfosQuery_descriptor_ = file->message_type(15);
  static const int DataFileInfosQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosQuery, num_),
  };
  DataFileInfosQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFileInfosQuery_descriptor_,
      DataFileInfosQuery::default_instance_,
      DataFileInfosQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFileInfosQuery));
  DataFileInfosReply_descriptor_ = file->message_type(16);
  static const int DataFileInfosReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply, data_file_infos_),
  };
  DataFileInfosReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFileInfosReply_descriptor_,
      DataFileInfosReply::default_instance_,
      DataFileInfosReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFileInfosReply));
  DataFileInfosReply_DataFileInfo_descriptor_ = DataFileInfosReply_descriptor_->nested_type(0);
  static const int DataFileInfosReply_DataFileInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, using_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, name_),
  };
  DataFileInfosReply_DataFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFileInfosReply_DataFileInfo_descriptor_,
      DataFileInfosReply_DataFileInfo::default_instance_,
      DataFileInfosReply_DataFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFileInfosReply_DataFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFileInfosReply_DataFileInfo));
  AddFileQuery_descriptor_ = file->message_type(17);
  static const int AddFileQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileQuery, filename_),
  };
  AddFileQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFileQuery_descriptor_,
      AddFileQuery::default_instance_,
      AddFileQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFileQuery));
  AddFileReply_descriptor_ = file->message_type(18);
  static const int AddFileReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileReply, err_),
  };
  AddFileReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFileReply_descriptor_,
      AddFileReply::default_instance_,
      AddFileReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFileReply));
  CreateFileQuery_descriptor_ = file->message_type(19);
  static const int CreateFileQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, end_time_),
  };
  CreateFileQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFileQuery_descriptor_,
      CreateFileQuery::default_instance_,
      CreateFileQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFileQuery));
  CreateFileReply_descriptor_ = file->message_type(20);
  static const int CreateFileReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileReply, err_),
  };
  CreateFileReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFileReply_descriptor_,
      CreateFileReply::default_instance_,
      CreateFileReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFileReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFileReply));
  DeleteFileQuery_descriptor_ = file->message_type(21);
  static const int DeleteFileQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileQuery, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileQuery, file_name_),
  };
  DeleteFileQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFileQuery_descriptor_,
      DeleteFileQuery::default_instance_,
      DeleteFileQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFileQuery));
  DeleteFileReply_descriptor_ = file->message_type(22);
  static const int DeleteFileReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReply, err_),
  };
  DeleteFileReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFileReply_descriptor_,
      DeleteFileReply::default_instance_,
      DeleteFileReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFileReply));
  RebuildIndexQuery_descriptor_ = file->message_type(23);
  static const int RebuildIndexQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexQuery, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexQuery, start_time_),
  };
  RebuildIndexQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebuildIndexQuery_descriptor_,
      RebuildIndexQuery::default_instance_,
      RebuildIndexQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebuildIndexQuery));
  RebuildIndexReply_descriptor_ = file->message_type(24);
  static const int RebuildIndexReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexReply, err_),
  };
  RebuildIndexReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebuildIndexReply_descriptor_,
      RebuildIndexReply::default_instance_,
      RebuildIndexReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebuildIndexReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebuildIndexReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataInfo_descriptor_, &DataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteNewDatasQuery_descriptor_, &WriteNewDatasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteNewDatasQuery_WriteDataInfo_descriptor_, &WriteNewDatasQuery_WriteDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteNewDatasReply_descriptor_, &WriteNewDatasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadNewDatasQuery_descriptor_, &ReadNewDatasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadNewDatasReply_descriptor_, &ReadNewDatasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDatasNumQuery_descriptor_, &ReadDatasNumQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDatasNumReply_descriptor_, &ReadDatasNumReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDatasQuery_descriptor_, &ReadDatasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDatasReply_descriptor_, &ReadDatasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteOldDatasQuery_descriptor_, &WriteOldDatasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteOldDatasReply_descriptor_, &WriteOldDatasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDatasQuery_descriptor_, &RemoveDatasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDatasReply_descriptor_, &RemoveDatasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataFileNumsQuery_descriptor_, &GetDataFileNumsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataFileNumsReply_descriptor_, &GetDataFileNumsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFileInfosQuery_descriptor_, &DataFileInfosQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFileInfosReply_descriptor_, &DataFileInfosReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFileInfosReply_DataFileInfo_descriptor_, &DataFileInfosReply_DataFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFileQuery_descriptor_, &AddFileQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFileReply_descriptor_, &AddFileReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFileQuery_descriptor_, &CreateFileQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFileReply_descriptor_, &CreateFileReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFileQuery_descriptor_, &DeleteFileQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFileReply_descriptor_, &DeleteFileReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebuildIndexQuery_descriptor_, &RebuildIndexQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebuildIndexReply_descriptor_, &RebuildIndexReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datas_2eproto() {
  delete DataInfo::default_instance_;
  delete DataInfo_reflection_;
  delete WriteNewDatasQuery::default_instance_;
  delete WriteNewDatasQuery_reflection_;
  delete WriteNewDatasQuery_WriteDataInfo::default_instance_;
  delete WriteNewDatasQuery_WriteDataInfo_reflection_;
  delete WriteNewDatasReply::default_instance_;
  delete WriteNewDatasReply_reflection_;
  delete ReadNewDatasQuery::default_instance_;
  delete ReadNewDatasQuery_reflection_;
  delete ReadNewDatasReply::default_instance_;
  delete ReadNewDatasReply_reflection_;
  delete ReadDatasNumQuery::default_instance_;
  delete ReadDatasNumQuery_reflection_;
  delete ReadDatasNumReply::default_instance_;
  delete ReadDatasNumReply_reflection_;
  delete ReadDatasQuery::default_instance_;
  delete ReadDatasQuery_reflection_;
  delete ReadDatasReply::default_instance_;
  delete ReadDatasReply_reflection_;
  delete WriteOldDatasQuery::default_instance_;
  delete WriteOldDatasQuery_reflection_;
  delete WriteOldDatasReply::default_instance_;
  delete WriteOldDatasReply_reflection_;
  delete RemoveDatasQuery::default_instance_;
  delete RemoveDatasQuery_reflection_;
  delete RemoveDatasReply::default_instance_;
  delete RemoveDatasReply_reflection_;
  delete GetDataFileNumsQuery::default_instance_;
  delete GetDataFileNumsQuery_reflection_;
  delete GetDataFileNumsReply::default_instance_;
  delete GetDataFileNumsReply_reflection_;
  delete DataFileInfosQuery::default_instance_;
  delete DataFileInfosQuery_reflection_;
  delete DataFileInfosReply::default_instance_;
  delete DataFileInfosReply_reflection_;
  delete DataFileInfosReply_DataFileInfo::default_instance_;
  delete DataFileInfosReply_DataFileInfo_reflection_;
  delete AddFileQuery::default_instance_;
  delete AddFileQuery_reflection_;
  delete AddFileReply::default_instance_;
  delete AddFileReply_reflection_;
  delete CreateFileQuery::default_instance_;
  delete CreateFileQuery_reflection_;
  delete CreateFileReply::default_instance_;
  delete CreateFileReply_reflection_;
  delete DeleteFileQuery::default_instance_;
  delete DeleteFileQuery_reflection_;
  delete DeleteFileReply::default_instance_;
  delete DeleteFileReply_reflection_;
  delete RebuildIndexQuery::default_instance_;
  delete RebuildIndexQuery_reflection_;
  delete RebuildIndexReply::default_instance_;
  delete RebuildIndexReply_reflection_;
}

void protobuf_AddDesc_datas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013datas.proto\022\005Datas\",\n\010DataInfo\022\022\n\ntime"
    "_stamp\030\001 \002(\003\022\014\n\004data\030\002 \002(\014\"\242\001\n\022WriteNewD"
    "atasQuery\022;\n\ndata_infos\030\001 \003(\0132\'.Datas.Wr"
    "iteNewDatasQuery.WriteDataInfo\032O\n\rWriteD"
    "ataInfo\022\n\n\002id\030\001 \002(\005\022\022\n\ntime_stamp\030\002 \002(\003\022"
    "\020\n\010table_id\030\003 \002(\003\022\014\n\004data\030\004 \002(\014\".\n\022Write"
    "NewDatasReply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\""
    " \n\021ReadNewDatasQuery\022\013\n\003ids\030\001 \003(\005\"R\n\021Rea"
    "dNewDatasReply\022\013\n\003err\030\001 \002(\005\022#\n\ndata_info"
    "s\030\002 \003(\0132\017.Datas.DataInfo\022\013\n\003num\030\003 \002(\005\"E\n"
    "\021ReadDatasNumQuery\022\n\n\002id\030\001 \002(\005\022\022\n\ntime_b"
    "egin\030\002 \002(\003\022\020\n\010time_end\030\003 \002(\003\"-\n\021ReadData"
    "sNumReply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"U\n\016R"
    "eadDatasQuery\022\n\n\002id\030\001 \002(\005\022\022\n\ntime_begin\030"
    "\002 \002(\003\022\020\n\010time_end\030\003 \002(\003\022\021\n\tfrom_time\030\004 \002"
    "(\003\"B\n\016ReadDatasReply\022\013\n\003err\030\001 \002(\005\022#\n\ndat"
    "a_infos\030\002 \003(\0132\017.Datas.DataInfo\"E\n\022WriteO"
    "ldDatasQuery\022\n\n\002id\030\001 \002(\005\022#\n\ndata_infos\030\002"
    " \003(\0132\017.Datas.DataInfo\".\n\022WriteOldDatasRe"
    "ply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"3\n\020RemoveD"
    "atasQuery\022\n\n\002id\030\001 \002(\005\022\023\n\013time_stamps\030\002 \003"
    "(\003\"\037\n\020RemoveDatasReply\022\013\n\003err\030\001 \002(\005\"&\n\024G"
    "etDataFileNumsQuery\022\016\n\006unused\030\001 \002(\005\"0\n\024G"
    "etDataFileNumsReply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030"
    "\002 \001(\005\"!\n\022DataFileInfosQuery\022\013\n\003num\030\001 \002(\005"
    "\"\310\001\n\022DataFileInfosReply\022\013\n\003err\030\001 \002(\005\022\?\n\017"
    "data_file_infos\030\002 \003(\0132&.Datas.DataFileIn"
    "fosReply.DataFileInfo\032d\n\014DataFileInfo\022\022\n"
    "\nusing_rate\030\001 \002(\002\022\014\n\004size\030\002 \002(\003\022\022\n\nstart"
    "_time\030\003 \002(\003\022\020\n\010end_time\030\004 \002(\003\022\014\n\004name\030\005 "
    "\002(\014\" \n\014AddFileQuery\022\020\n\010filename\030\001 \002(\014\"\033\n"
    "\014AddFileReply\022\013\n\003err\030\001 \002(\005\"W\n\017CreateFile"
    "Query\022\020\n\010filename\030\001 \002(\014\022\014\n\004size\030\002 \002(\003\022\022\n"
    "\nstart_time\030\003 \002(\003\022\020\n\010end_time\030\004 \002(\003\"\036\n\017C"
    "reateFileReply\022\013\n\003err\030\001 \002(\005\"8\n\017DeleteFil"
    "eQuery\022\022\n\nstart_time\030\001 \002(\003\022\021\n\tfile_name\030"
    "\002 \002(\014\"\036\n\017DeleteFileReply\022\013\n\003err\030\001 \002(\005\"9\n"
    "\021RebuildIndexQuery\022\020\n\010filename\030\001 \002(\014\022\022\n\n"
    "start_time\030\002 \002(\003\" \n\021RebuildIndexReply\022\013\n"
    "\003err\030\001 \002(\005", 1570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datas.proto", &protobuf_RegisterTypes);
  DataInfo::default_instance_ = new DataInfo();
  WriteNewDatasQuery::default_instance_ = new WriteNewDatasQuery();
  WriteNewDatasQuery_WriteDataInfo::default_instance_ = new WriteNewDatasQuery_WriteDataInfo();
  WriteNewDatasReply::default_instance_ = new WriteNewDatasReply();
  ReadNewDatasQuery::default_instance_ = new ReadNewDatasQuery();
  ReadNewDatasReply::default_instance_ = new ReadNewDatasReply();
  ReadDatasNumQuery::default_instance_ = new ReadDatasNumQuery();
  ReadDatasNumReply::default_instance_ = new ReadDatasNumReply();
  ReadDatasQuery::default_instance_ = new ReadDatasQuery();
  ReadDatasReply::default_instance_ = new ReadDatasReply();
  WriteOldDatasQuery::default_instance_ = new WriteOldDatasQuery();
  WriteOldDatasReply::default_instance_ = new WriteOldDatasReply();
  RemoveDatasQuery::default_instance_ = new RemoveDatasQuery();
  RemoveDatasReply::default_instance_ = new RemoveDatasReply();
  GetDataFileNumsQuery::default_instance_ = new GetDataFileNumsQuery();
  GetDataFileNumsReply::default_instance_ = new GetDataFileNumsReply();
  DataFileInfosQuery::default_instance_ = new DataFileInfosQuery();
  DataFileInfosReply::default_instance_ = new DataFileInfosReply();
  DataFileInfosReply_DataFileInfo::default_instance_ = new DataFileInfosReply_DataFileInfo();
  AddFileQuery::default_instance_ = new AddFileQuery();
  AddFileReply::default_instance_ = new AddFileReply();
  CreateFileQuery::default_instance_ = new CreateFileQuery();
  CreateFileReply::default_instance_ = new CreateFileReply();
  DeleteFileQuery::default_instance_ = new DeleteFileQuery();
  DeleteFileReply::default_instance_ = new DeleteFileReply();
  RebuildIndexQuery::default_instance_ = new RebuildIndexQuery();
  RebuildIndexReply::default_instance_ = new RebuildIndexReply();
  DataInfo::default_instance_->InitAsDefaultInstance();
  WriteNewDatasQuery::default_instance_->InitAsDefaultInstance();
  WriteNewDatasQuery_WriteDataInfo::default_instance_->InitAsDefaultInstance();
  WriteNewDatasReply::default_instance_->InitAsDefaultInstance();
  ReadNewDatasQuery::default_instance_->InitAsDefaultInstance();
  ReadNewDatasReply::default_instance_->InitAsDefaultInstance();
  ReadDatasNumQuery::default_instance_->InitAsDefaultInstance();
  ReadDatasNumReply::default_instance_->InitAsDefaultInstance();
  ReadDatasQuery::default_instance_->InitAsDefaultInstance();
  ReadDatasReply::default_instance_->InitAsDefaultInstance();
  WriteOldDatasQuery::default_instance_->InitAsDefaultInstance();
  WriteOldDatasReply::default_instance_->InitAsDefaultInstance();
  RemoveDatasQuery::default_instance_->InitAsDefaultInstance();
  RemoveDatasReply::default_instance_->InitAsDefaultInstance();
  GetDataFileNumsQuery::default_instance_->InitAsDefaultInstance();
  GetDataFileNumsReply::default_instance_->InitAsDefaultInstance();
  DataFileInfosQuery::default_instance_->InitAsDefaultInstance();
  DataFileInfosReply::default_instance_->InitAsDefaultInstance();
  DataFileInfosReply_DataFileInfo::default_instance_->InitAsDefaultInstance();
  AddFileQuery::default_instance_->InitAsDefaultInstance();
  AddFileReply::default_instance_->InitAsDefaultInstance();
  CreateFileQuery::default_instance_->InitAsDefaultInstance();
  CreateFileReply::default_instance_->InitAsDefaultInstance();
  DeleteFileQuery::default_instance_->InitAsDefaultInstance();
  DeleteFileReply::default_instance_->InitAsDefaultInstance();
  RebuildIndexQuery::default_instance_->InitAsDefaultInstance();
  RebuildIndexReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datas_2eproto {
  StaticDescriptorInitializer_datas_2eproto() {
    protobuf_AddDesc_datas_2eproto();
  }
} static_descriptor_initializer_datas_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DataInfo::kTimeStampFieldNumber;
const int DataInfo::kDataFieldNumber;
#endif  // !_MSC_VER

DataInfo::DataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataInfo::InitAsDefaultInstance() {
}

DataInfo::DataInfo(const DataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataInfo::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataInfo::~DataInfo() {
  SharedDtor();
}

void DataInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataInfo_descriptor_;
}

const DataInfo& DataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DataInfo* DataInfo::default_instance_ = NULL;

DataInfo* DataInfo::New() const {
  return new DataInfo;
}

void DataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_stamp(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_stamp(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataInfo::MergeFrom(const DataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataInfo::CopyFrom(const DataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataInfo::Swap(DataInfo* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataInfo_descriptor_;
  metadata.reflection = DataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteNewDatasQuery_WriteDataInfo::kIdFieldNumber;
const int WriteNewDatasQuery_WriteDataInfo::kTimeStampFieldNumber;
const int WriteNewDatasQuery_WriteDataInfo::kTableIdFieldNumber;
const int WriteNewDatasQuery_WriteDataInfo::kDataFieldNumber;
#endif  // !_MSC_VER

WriteNewDatasQuery_WriteDataInfo::WriteNewDatasQuery_WriteDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteNewDatasQuery_WriteDataInfo::InitAsDefaultInstance() {
}

WriteNewDatasQuery_WriteDataInfo::WriteNewDatasQuery_WriteDataInfo(const WriteNewDatasQuery_WriteDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteNewDatasQuery_WriteDataInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  table_id_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteNewDatasQuery_WriteDataInfo::~WriteNewDatasQuery_WriteDataInfo() {
  SharedDtor();
}

void WriteNewDatasQuery_WriteDataInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WriteNewDatasQuery_WriteDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteNewDatasQuery_WriteDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteNewDatasQuery_WriteDataInfo_descriptor_;
}

const WriteNewDatasQuery_WriteDataInfo& WriteNewDatasQuery_WriteDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

WriteNewDatasQuery_WriteDataInfo* WriteNewDatasQuery_WriteDataInfo::default_instance_ = NULL;

WriteNewDatasQuery_WriteDataInfo* WriteNewDatasQuery_WriteDataInfo::New() const {
  return new WriteNewDatasQuery_WriteDataInfo;
}

void WriteNewDatasQuery_WriteDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
    table_id_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteNewDatasQuery_WriteDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required int64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int64 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteNewDatasQuery_WriteDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }

  // required int64 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->table_id(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteNewDatasQuery_WriteDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }

  // required int64 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->table_id(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteNewDatasQuery_WriteDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // required int64 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->table_id());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteNewDatasQuery_WriteDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteNewDatasQuery_WriteDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteNewDatasQuery_WriteDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteNewDatasQuery_WriteDataInfo::MergeFrom(const WriteNewDatasQuery_WriteDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteNewDatasQuery_WriteDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteNewDatasQuery_WriteDataInfo::CopyFrom(const WriteNewDatasQuery_WriteDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteNewDatasQuery_WriteDataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WriteNewDatasQuery_WriteDataInfo::Swap(WriteNewDatasQuery_WriteDataInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(table_id_, other->table_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteNewDatasQuery_WriteDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteNewDatasQuery_WriteDataInfo_descriptor_;
  metadata.reflection = WriteNewDatasQuery_WriteDataInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WriteNewDatasQuery::kDataInfosFieldNumber;
#endif  // !_MSC_VER

WriteNewDatasQuery::WriteNewDatasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteNewDatasQuery::InitAsDefaultInstance() {
}

WriteNewDatasQuery::WriteNewDatasQuery(const WriteNewDatasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteNewDatasQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteNewDatasQuery::~WriteNewDatasQuery() {
  SharedDtor();
}

void WriteNewDatasQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteNewDatasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteNewDatasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteNewDatasQuery_descriptor_;
}

const WriteNewDatasQuery& WriteNewDatasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

WriteNewDatasQuery* WriteNewDatasQuery::default_instance_ = NULL;

WriteNewDatasQuery* WriteNewDatasQuery::New() const {
  return new WriteNewDatasQuery;
}

void WriteNewDatasQuery::Clear() {
  data_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteNewDatasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Datas.WriteNewDatasQuery.WriteDataInfo data_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteNewDatasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Datas.WriteNewDatasQuery.WriteDataInfo data_infos = 1;
  for (int i = 0; i < this->data_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteNewDatasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Datas.WriteNewDatasQuery.WriteDataInfo data_infos = 1;
  for (int i = 0; i < this->data_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteNewDatasQuery::ByteSize() const {
  int total_size = 0;

  // repeated .Datas.WriteNewDatasQuery.WriteDataInfo data_infos = 1;
  total_size += 1 * this->data_infos_size();
  for (int i = 0; i < this->data_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteNewDatasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteNewDatasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteNewDatasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteNewDatasQuery::MergeFrom(const WriteNewDatasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_infos_.MergeFrom(from.data_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteNewDatasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteNewDatasQuery::CopyFrom(const WriteNewDatasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteNewDatasQuery::IsInitialized() const {

  for (int i = 0; i < data_infos_size(); i++) {
    if (!this->data_infos(i).IsInitialized()) return false;
  }
  return true;
}

void WriteNewDatasQuery::Swap(WriteNewDatasQuery* other) {
  if (other != this) {
    data_infos_.Swap(&other->data_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteNewDatasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteNewDatasQuery_descriptor_;
  metadata.reflection = WriteNewDatasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteNewDatasReply::kErrFieldNumber;
const int WriteNewDatasReply::kNumFieldNumber;
#endif  // !_MSC_VER

WriteNewDatasReply::WriteNewDatasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteNewDatasReply::InitAsDefaultInstance() {
}

WriteNewDatasReply::WriteNewDatasReply(const WriteNewDatasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteNewDatasReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteNewDatasReply::~WriteNewDatasReply() {
  SharedDtor();
}

void WriteNewDatasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteNewDatasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteNewDatasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteNewDatasReply_descriptor_;
}

const WriteNewDatasReply& WriteNewDatasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

WriteNewDatasReply* WriteNewDatasReply::default_instance_ = NULL;

WriteNewDatasReply* WriteNewDatasReply::New() const {
  return new WriteNewDatasReply;
}

void WriteNewDatasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteNewDatasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteNewDatasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteNewDatasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteNewDatasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteNewDatasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteNewDatasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteNewDatasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteNewDatasReply::MergeFrom(const WriteNewDatasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteNewDatasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteNewDatasReply::CopyFrom(const WriteNewDatasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteNewDatasReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WriteNewDatasReply::Swap(WriteNewDatasReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteNewDatasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteNewDatasReply_descriptor_;
  metadata.reflection = WriteNewDatasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadNewDatasQuery::kIdsFieldNumber;
#endif  // !_MSC_VER

ReadNewDatasQuery::ReadNewDatasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadNewDatasQuery::InitAsDefaultInstance() {
}

ReadNewDatasQuery::ReadNewDatasQuery(const ReadNewDatasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadNewDatasQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadNewDatasQuery::~ReadNewDatasQuery() {
  SharedDtor();
}

void ReadNewDatasQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadNewDatasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadNewDatasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadNewDatasQuery_descriptor_;
}

const ReadNewDatasQuery& ReadNewDatasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadNewDatasQuery* ReadNewDatasQuery::default_instance_ = NULL;

ReadNewDatasQuery* ReadNewDatasQuery::New() const {
  return new ReadNewDatasQuery;
}

void ReadNewDatasQuery::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadNewDatasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadNewDatasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadNewDatasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadNewDatasQuery::ByteSize() const {
  int total_size = 0;

  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadNewDatasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadNewDatasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadNewDatasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadNewDatasQuery::MergeFrom(const ReadNewDatasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadNewDatasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadNewDatasQuery::CopyFrom(const ReadNewDatasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadNewDatasQuery::IsInitialized() const {

  return true;
}

void ReadNewDatasQuery::Swap(ReadNewDatasQuery* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadNewDatasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadNewDatasQuery_descriptor_;
  metadata.reflection = ReadNewDatasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadNewDatasReply::kErrFieldNumber;
const int ReadNewDatasReply::kDataInfosFieldNumber;
const int ReadNewDatasReply::kNumFieldNumber;
#endif  // !_MSC_VER

ReadNewDatasReply::ReadNewDatasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadNewDatasReply::InitAsDefaultInstance() {
}

ReadNewDatasReply::ReadNewDatasReply(const ReadNewDatasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadNewDatasReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadNewDatasReply::~ReadNewDatasReply() {
  SharedDtor();
}

void ReadNewDatasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadNewDatasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadNewDatasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadNewDatasReply_descriptor_;
}

const ReadNewDatasReply& ReadNewDatasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadNewDatasReply* ReadNewDatasReply::default_instance_ = NULL;

ReadNewDatasReply* ReadNewDatasReply::New() const {
  return new ReadNewDatasReply;
}

void ReadNewDatasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  data_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadNewDatasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        break;
      }

      // repeated .Datas.DataInfo data_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadNewDatasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_infos(i), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadNewDatasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_infos(i), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadNewDatasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .Datas.DataInfo data_infos = 2;
  total_size += 1 * this->data_infos_size();
  for (int i = 0; i < this->data_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadNewDatasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadNewDatasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadNewDatasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadNewDatasReply::MergeFrom(const ReadNewDatasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_infos_.MergeFrom(from.data_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadNewDatasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadNewDatasReply::CopyFrom(const ReadNewDatasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadNewDatasReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < data_infos_size(); i++) {
    if (!this->data_infos(i).IsInitialized()) return false;
  }
  return true;
}

void ReadNewDatasReply::Swap(ReadNewDatasReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    data_infos_.Swap(&other->data_infos_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadNewDatasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadNewDatasReply_descriptor_;
  metadata.reflection = ReadNewDatasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDatasNumQuery::kIdFieldNumber;
const int ReadDatasNumQuery::kTimeBeginFieldNumber;
const int ReadDatasNumQuery::kTimeEndFieldNumber;
#endif  // !_MSC_VER

ReadDatasNumQuery::ReadDatasNumQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDatasNumQuery::InitAsDefaultInstance() {
}

ReadDatasNumQuery::ReadDatasNumQuery(const ReadDatasNumQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDatasNumQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_begin_ = GOOGLE_LONGLONG(0);
  time_end_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDatasNumQuery::~ReadDatasNumQuery() {
  SharedDtor();
}

void ReadDatasNumQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadDatasNumQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDatasNumQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDatasNumQuery_descriptor_;
}

const ReadDatasNumQuery& ReadDatasNumQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadDatasNumQuery* ReadDatasNumQuery::default_instance_ = NULL;

ReadDatasNumQuery* ReadDatasNumQuery::New() const {
  return new ReadDatasNumQuery;
}

void ReadDatasNumQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_begin_ = GOOGLE_LONGLONG(0);
    time_end_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDatasNumQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_begin;
        break;
      }

      // required int64 time_begin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_begin_)));
          set_has_time_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_end;
        break;
      }

      // required int64 time_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_end_)));
          set_has_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDatasNumQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 time_begin = 2;
  if (has_time_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_begin(), output);
  }

  // required int64 time_end = 3;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDatasNumQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 time_begin = 2;
  if (has_time_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_begin(), target);
  }

  // required int64 time_end = 3;
  if (has_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDatasNumQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 time_begin = 2;
    if (has_time_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_begin());
    }

    // required int64 time_end = 3;
    if (has_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDatasNumQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDatasNumQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDatasNumQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDatasNumQuery::MergeFrom(const ReadDatasNumQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time_begin()) {
      set_time_begin(from.time_begin());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDatasNumQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDatasNumQuery::CopyFrom(const ReadDatasNumQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDatasNumQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReadDatasNumQuery::Swap(ReadDatasNumQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_begin_, other->time_begin_);
    std::swap(time_end_, other->time_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDatasNumQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDatasNumQuery_descriptor_;
  metadata.reflection = ReadDatasNumQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDatasNumReply::kErrFieldNumber;
const int ReadDatasNumReply::kNumFieldNumber;
#endif  // !_MSC_VER

ReadDatasNumReply::ReadDatasNumReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDatasNumReply::InitAsDefaultInstance() {
}

ReadDatasNumReply::ReadDatasNumReply(const ReadDatasNumReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDatasNumReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDatasNumReply::~ReadDatasNumReply() {
  SharedDtor();
}

void ReadDatasNumReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadDatasNumReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDatasNumReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDatasNumReply_descriptor_;
}

const ReadDatasNumReply& ReadDatasNumReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadDatasNumReply* ReadDatasNumReply::default_instance_ = NULL;

ReadDatasNumReply* ReadDatasNumReply::New() const {
  return new ReadDatasNumReply;
}

void ReadDatasNumReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDatasNumReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDatasNumReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDatasNumReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDatasNumReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDatasNumReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDatasNumReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDatasNumReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDatasNumReply::MergeFrom(const ReadDatasNumReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDatasNumReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDatasNumReply::CopyFrom(const ReadDatasNumReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDatasNumReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadDatasNumReply::Swap(ReadDatasNumReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDatasNumReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDatasNumReply_descriptor_;
  metadata.reflection = ReadDatasNumReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDatasQuery::kIdFieldNumber;
const int ReadDatasQuery::kTimeBeginFieldNumber;
const int ReadDatasQuery::kTimeEndFieldNumber;
const int ReadDatasQuery::kFromTimeFieldNumber;
#endif  // !_MSC_VER

ReadDatasQuery::ReadDatasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDatasQuery::InitAsDefaultInstance() {
}

ReadDatasQuery::ReadDatasQuery(const ReadDatasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDatasQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_begin_ = GOOGLE_LONGLONG(0);
  time_end_ = GOOGLE_LONGLONG(0);
  from_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDatasQuery::~ReadDatasQuery() {
  SharedDtor();
}

void ReadDatasQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadDatasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDatasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDatasQuery_descriptor_;
}

const ReadDatasQuery& ReadDatasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadDatasQuery* ReadDatasQuery::default_instance_ = NULL;

ReadDatasQuery* ReadDatasQuery::New() const {
  return new ReadDatasQuery;
}

void ReadDatasQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_begin_ = GOOGLE_LONGLONG(0);
    time_end_ = GOOGLE_LONGLONG(0);
    from_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDatasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_begin;
        break;
      }

      // required int64 time_begin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_begin_)));
          set_has_time_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_end;
        break;
      }

      // required int64 time_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_end_)));
          set_has_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from_time;
        break;
      }

      // required int64 from_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_time_)));
          set_has_from_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDatasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 time_begin = 2;
  if (has_time_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_begin(), output);
  }

  // required int64 time_end = 3;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_end(), output);
  }

  // required int64 from_time = 4;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->from_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDatasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 time_begin = 2;
  if (has_time_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_begin(), target);
  }

  // required int64 time_end = 3;
  if (has_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_end(), target);
  }

  // required int64 from_time = 4;
  if (has_from_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->from_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDatasQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 time_begin = 2;
    if (has_time_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_begin());
    }

    // required int64 time_end = 3;
    if (has_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_end());
    }

    // required int64 from_time = 4;
    if (has_from_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDatasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDatasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDatasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDatasQuery::MergeFrom(const ReadDatasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time_begin()) {
      set_time_begin(from.time_begin());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
    if (from.has_from_time()) {
      set_from_time(from.from_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDatasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDatasQuery::CopyFrom(const ReadDatasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDatasQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReadDatasQuery::Swap(ReadDatasQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_begin_, other->time_begin_);
    std::swap(time_end_, other->time_end_);
    std::swap(from_time_, other->from_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDatasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDatasQuery_descriptor_;
  metadata.reflection = ReadDatasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDatasReply::kErrFieldNumber;
const int ReadDatasReply::kDataInfosFieldNumber;
#endif  // !_MSC_VER

ReadDatasReply::ReadDatasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDatasReply::InitAsDefaultInstance() {
}

ReadDatasReply::ReadDatasReply(const ReadDatasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDatasReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDatasReply::~ReadDatasReply() {
  SharedDtor();
}

void ReadDatasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadDatasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDatasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDatasReply_descriptor_;
}

const ReadDatasReply& ReadDatasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

ReadDatasReply* ReadDatasReply::default_instance_ = NULL;

ReadDatasReply* ReadDatasReply::New() const {
  return new ReadDatasReply;
}

void ReadDatasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  data_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDatasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        break;
      }

      // repeated .Datas.DataInfo data_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDatasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDatasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDatasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  // repeated .Datas.DataInfo data_infos = 2;
  total_size += 1 * this->data_infos_size();
  for (int i = 0; i < this->data_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDatasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDatasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDatasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDatasReply::MergeFrom(const ReadDatasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_infos_.MergeFrom(from.data_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDatasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDatasReply::CopyFrom(const ReadDatasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDatasReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_infos_size(); i++) {
    if (!this->data_infos(i).IsInitialized()) return false;
  }
  return true;
}

void ReadDatasReply::Swap(ReadDatasReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    data_infos_.Swap(&other->data_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDatasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDatasReply_descriptor_;
  metadata.reflection = ReadDatasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteOldDatasQuery::kIdFieldNumber;
const int WriteOldDatasQuery::kDataInfosFieldNumber;
#endif  // !_MSC_VER

WriteOldDatasQuery::WriteOldDatasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteOldDatasQuery::InitAsDefaultInstance() {
}

WriteOldDatasQuery::WriteOldDatasQuery(const WriteOldDatasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteOldDatasQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteOldDatasQuery::~WriteOldDatasQuery() {
  SharedDtor();
}

void WriteOldDatasQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteOldDatasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteOldDatasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteOldDatasQuery_descriptor_;
}

const WriteOldDatasQuery& WriteOldDatasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

WriteOldDatasQuery* WriteOldDatasQuery::default_instance_ = NULL;

WriteOldDatasQuery* WriteOldDatasQuery::New() const {
  return new WriteOldDatasQuery;
}

void WriteOldDatasQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  data_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteOldDatasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        break;
      }

      // repeated .Datas.DataInfo data_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteOldDatasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteOldDatasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .Datas.DataInfo data_infos = 2;
  for (int i = 0; i < this->data_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteOldDatasQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .Datas.DataInfo data_infos = 2;
  total_size += 1 * this->data_infos_size();
  for (int i = 0; i < this->data_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteOldDatasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteOldDatasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteOldDatasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteOldDatasQuery::MergeFrom(const WriteOldDatasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_infos_.MergeFrom(from.data_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteOldDatasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOldDatasQuery::CopyFrom(const WriteOldDatasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOldDatasQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_infos_size(); i++) {
    if (!this->data_infos(i).IsInitialized()) return false;
  }
  return true;
}

void WriteOldDatasQuery::Swap(WriteOldDatasQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    data_infos_.Swap(&other->data_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteOldDatasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteOldDatasQuery_descriptor_;
  metadata.reflection = WriteOldDatasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteOldDatasReply::kErrFieldNumber;
const int WriteOldDatasReply::kNumFieldNumber;
#endif  // !_MSC_VER

WriteOldDatasReply::WriteOldDatasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteOldDatasReply::InitAsDefaultInstance() {
}

WriteOldDatasReply::WriteOldDatasReply(const WriteOldDatasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteOldDatasReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteOldDatasReply::~WriteOldDatasReply() {
  SharedDtor();
}

void WriteOldDatasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteOldDatasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteOldDatasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteOldDatasReply_descriptor_;
}

const WriteOldDatasReply& WriteOldDatasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

WriteOldDatasReply* WriteOldDatasReply::default_instance_ = NULL;

WriteOldDatasReply* WriteOldDatasReply::New() const {
  return new WriteOldDatasReply;
}

void WriteOldDatasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteOldDatasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteOldDatasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteOldDatasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteOldDatasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteOldDatasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteOldDatasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteOldDatasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteOldDatasReply::MergeFrom(const WriteOldDatasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteOldDatasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOldDatasReply::CopyFrom(const WriteOldDatasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOldDatasReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WriteOldDatasReply::Swap(WriteOldDatasReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteOldDatasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteOldDatasReply_descriptor_;
  metadata.reflection = WriteOldDatasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDatasQuery::kIdFieldNumber;
const int RemoveDatasQuery::kTimeStampsFieldNumber;
#endif  // !_MSC_VER

RemoveDatasQuery::RemoveDatasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDatasQuery::InitAsDefaultInstance() {
}

RemoveDatasQuery::RemoveDatasQuery(const RemoveDatasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDatasQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDatasQuery::~RemoveDatasQuery() {
  SharedDtor();
}

void RemoveDatasQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveDatasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDatasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDatasQuery_descriptor_;
}

const RemoveDatasQuery& RemoveDatasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

RemoveDatasQuery* RemoveDatasQuery::default_instance_ = NULL;

RemoveDatasQuery* RemoveDatasQuery::New() const {
  return new RemoveDatasQuery;
}

void RemoveDatasQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  time_stamps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDatasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_stamps;
        break;
      }

      // repeated int64 time_stamps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_time_stamps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_time_stamps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_stamps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDatasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int64 time_stamps = 2;
  for (int i = 0; i < this->time_stamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->time_stamps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDatasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int64 time_stamps = 2;
  for (int i = 0; i < this->time_stamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->time_stamps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDatasQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int64 time_stamps = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_stamps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->time_stamps(i));
    }
    total_size += 1 * this->time_stamps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDatasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDatasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDatasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDatasQuery::MergeFrom(const RemoveDatasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_stamps_.MergeFrom(from.time_stamps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDatasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDatasQuery::CopyFrom(const RemoveDatasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDatasQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveDatasQuery::Swap(RemoveDatasQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    time_stamps_.Swap(&other->time_stamps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDatasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDatasQuery_descriptor_;
  metadata.reflection = RemoveDatasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDatasReply::kErrFieldNumber;
#endif  // !_MSC_VER

RemoveDatasReply::RemoveDatasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDatasReply::InitAsDefaultInstance() {
}

RemoveDatasReply::RemoveDatasReply(const RemoveDatasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDatasReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDatasReply::~RemoveDatasReply() {
  SharedDtor();
}

void RemoveDatasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveDatasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDatasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDatasReply_descriptor_;
}

const RemoveDatasReply& RemoveDatasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

RemoveDatasReply* RemoveDatasReply::default_instance_ = NULL;

RemoveDatasReply* RemoveDatasReply::New() const {
  return new RemoveDatasReply;
}

void RemoveDatasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDatasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDatasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDatasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDatasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDatasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDatasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDatasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDatasReply::MergeFrom(const RemoveDatasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDatasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDatasReply::CopyFrom(const RemoveDatasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDatasReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveDatasReply::Swap(RemoveDatasReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDatasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDatasReply_descriptor_;
  metadata.reflection = RemoveDatasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDataFileNumsQuery::kUnusedFieldNumber;
#endif  // !_MSC_VER

GetDataFileNumsQuery::GetDataFileNumsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataFileNumsQuery::InitAsDefaultInstance() {
}

GetDataFileNumsQuery::GetDataFileNumsQuery(const GetDataFileNumsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataFileNumsQuery::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataFileNumsQuery::~GetDataFileNumsQuery() {
  SharedDtor();
}

void GetDataFileNumsQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataFileNumsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataFileNumsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataFileNumsQuery_descriptor_;
}

const GetDataFileNumsQuery& GetDataFileNumsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

GetDataFileNumsQuery* GetDataFileNumsQuery::default_instance_ = NULL;

GetDataFileNumsQuery* GetDataFileNumsQuery::New() const {
  return new GetDataFileNumsQuery;
}

void GetDataFileNumsQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataFileNumsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDataFileNumsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataFileNumsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataFileNumsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataFileNumsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataFileNumsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataFileNumsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataFileNumsQuery::MergeFrom(const GetDataFileNumsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataFileNumsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataFileNumsQuery::CopyFrom(const GetDataFileNumsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataFileNumsQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDataFileNumsQuery::Swap(GetDataFileNumsQuery* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataFileNumsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataFileNumsQuery_descriptor_;
  metadata.reflection = GetDataFileNumsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDataFileNumsReply::kErrFieldNumber;
const int GetDataFileNumsReply::kNumFieldNumber;
#endif  // !_MSC_VER

GetDataFileNumsReply::GetDataFileNumsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataFileNumsReply::InitAsDefaultInstance() {
}

GetDataFileNumsReply::GetDataFileNumsReply(const GetDataFileNumsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataFileNumsReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataFileNumsReply::~GetDataFileNumsReply() {
  SharedDtor();
}

void GetDataFileNumsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataFileNumsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataFileNumsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataFileNumsReply_descriptor_;
}

const GetDataFileNumsReply& GetDataFileNumsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

GetDataFileNumsReply* GetDataFileNumsReply::default_instance_ = NULL;

GetDataFileNumsReply* GetDataFileNumsReply::New() const {
  return new GetDataFileNumsReply;
}

void GetDataFileNumsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataFileNumsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDataFileNumsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataFileNumsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataFileNumsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataFileNumsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataFileNumsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataFileNumsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataFileNumsReply::MergeFrom(const GetDataFileNumsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataFileNumsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataFileNumsReply::CopyFrom(const GetDataFileNumsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataFileNumsReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDataFileNumsReply::Swap(GetDataFileNumsReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataFileNumsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataFileNumsReply_descriptor_;
  metadata.reflection = GetDataFileNumsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataFileInfosQuery::kNumFieldNumber;
#endif  // !_MSC_VER

DataFileInfosQuery::DataFileInfosQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFileInfosQuery::InitAsDefaultInstance() {
}

DataFileInfosQuery::DataFileInfosQuery(const DataFileInfosQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFileInfosQuery::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFileInfosQuery::~DataFileInfosQuery() {
  SharedDtor();
}

void DataFileInfosQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataFileInfosQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFileInfosQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFileInfosQuery_descriptor_;
}

const DataFileInfosQuery& DataFileInfosQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DataFileInfosQuery* DataFileInfosQuery::default_instance_ = NULL;

DataFileInfosQuery* DataFileInfosQuery::New() const {
  return new DataFileInfosQuery;
}

void DataFileInfosQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFileInfosQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFileInfosQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFileInfosQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFileInfosQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFileInfosQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFileInfosQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFileInfosQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFileInfosQuery::MergeFrom(const DataFileInfosQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFileInfosQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFileInfosQuery::CopyFrom(const DataFileInfosQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfosQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataFileInfosQuery::Swap(DataFileInfosQuery* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFileInfosQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFileInfosQuery_descriptor_;
  metadata.reflection = DataFileInfosQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataFileInfosReply_DataFileInfo::kUsingRateFieldNumber;
const int DataFileInfosReply_DataFileInfo::kSizeFieldNumber;
const int DataFileInfosReply_DataFileInfo::kStartTimeFieldNumber;
const int DataFileInfosReply_DataFileInfo::kEndTimeFieldNumber;
const int DataFileInfosReply_DataFileInfo::kNameFieldNumber;
#endif  // !_MSC_VER

DataFileInfosReply_DataFileInfo::DataFileInfosReply_DataFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFileInfosReply_DataFileInfo::InitAsDefaultInstance() {
}

DataFileInfosReply_DataFileInfo::DataFileInfosReply_DataFileInfo(const DataFileInfosReply_DataFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFileInfosReply_DataFileInfo::SharedCtor() {
  _cached_size_ = 0;
  using_rate_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFileInfosReply_DataFileInfo::~DataFileInfosReply_DataFileInfo() {
  SharedDtor();
}

void DataFileInfosReply_DataFileInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataFileInfosReply_DataFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFileInfosReply_DataFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFileInfosReply_DataFileInfo_descriptor_;
}

const DataFileInfosReply_DataFileInfo& DataFileInfosReply_DataFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DataFileInfosReply_DataFileInfo* DataFileInfosReply_DataFileInfo::default_instance_ = NULL;

DataFileInfosReply_DataFileInfo* DataFileInfosReply_DataFileInfo::New() const {
  return new DataFileInfosReply_DataFileInfo;
}

void DataFileInfosReply_DataFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    using_rate_ = 0;
    size_ = GOOGLE_LONGLONG(0);
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFileInfosReply_DataFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float using_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &using_rate_)));
          set_has_using_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFileInfosReply_DataFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float using_rate = 1;
  if (has_using_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->using_rate(), output);
  }

  // required int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFileInfosReply_DataFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float using_rate = 1;
  if (has_using_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->using_rate(), target);
  }

  // required int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFileInfosReply_DataFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float using_rate = 1;
    if (has_using_rate()) {
      total_size += 1 + 4;
    }

    // required int64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFileInfosReply_DataFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFileInfosReply_DataFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFileInfosReply_DataFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFileInfosReply_DataFileInfo::MergeFrom(const DataFileInfosReply_DataFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_using_rate()) {
      set_using_rate(from.using_rate());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFileInfosReply_DataFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFileInfosReply_DataFileInfo::CopyFrom(const DataFileInfosReply_DataFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfosReply_DataFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DataFileInfosReply_DataFileInfo::Swap(DataFileInfosReply_DataFileInfo* other) {
  if (other != this) {
    std::swap(using_rate_, other->using_rate_);
    std::swap(size_, other->size_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFileInfosReply_DataFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFileInfosReply_DataFileInfo_descriptor_;
  metadata.reflection = DataFileInfosReply_DataFileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataFileInfosReply::kErrFieldNumber;
const int DataFileInfosReply::kDataFileInfosFieldNumber;
#endif  // !_MSC_VER

DataFileInfosReply::DataFileInfosReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFileInfosReply::InitAsDefaultInstance() {
}

DataFileInfosReply::DataFileInfosReply(const DataFileInfosReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFileInfosReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFileInfosReply::~DataFileInfosReply() {
  SharedDtor();
}

void DataFileInfosReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataFileInfosReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFileInfosReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFileInfosReply_descriptor_;
}

const DataFileInfosReply& DataFileInfosReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DataFileInfosReply* DataFileInfosReply::default_instance_ = NULL;

DataFileInfosReply* DataFileInfosReply::New() const {
  return new DataFileInfosReply;
}

void DataFileInfosReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  data_file_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFileInfosReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_file_infos;
        break;
      }

      // repeated .Datas.DataFileInfosReply.DataFileInfo data_file_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_file_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_file_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_file_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFileInfosReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Datas.DataFileInfosReply.DataFileInfo data_file_infos = 2;
  for (int i = 0; i < this->data_file_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_file_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFileInfosReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Datas.DataFileInfosReply.DataFileInfo data_file_infos = 2;
  for (int i = 0; i < this->data_file_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_file_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFileInfosReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  // repeated .Datas.DataFileInfosReply.DataFileInfo data_file_infos = 2;
  total_size += 1 * this->data_file_infos_size();
  for (int i = 0; i < this->data_file_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_file_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFileInfosReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFileInfosReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFileInfosReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFileInfosReply::MergeFrom(const DataFileInfosReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_file_infos_.MergeFrom(from.data_file_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFileInfosReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFileInfosReply::CopyFrom(const DataFileInfosReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfosReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_file_infos_size(); i++) {
    if (!this->data_file_infos(i).IsInitialized()) return false;
  }
  return true;
}

void DataFileInfosReply::Swap(DataFileInfosReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    data_file_infos_.Swap(&other->data_file_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFileInfosReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFileInfosReply_descriptor_;
  metadata.reflection = DataFileInfosReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFileQuery::kFilenameFieldNumber;
#endif  // !_MSC_VER

AddFileQuery::AddFileQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFileQuery::InitAsDefaultInstance() {
}

AddFileQuery::AddFileQuery(const AddFileQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFileQuery::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFileQuery::~AddFileQuery() {
  SharedDtor();
}

void AddFileQuery::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void AddFileQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFileQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFileQuery_descriptor_;
}

const AddFileQuery& AddFileQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

AddFileQuery* AddFileQuery::default_instance_ = NULL;

AddFileQuery* AddFileQuery::New() const {
  return new AddFileQuery;
}

void AddFileQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFileQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFileQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFileQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes filename = 1;
  if (has_filename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFileQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFileQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFileQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFileQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFileQuery::MergeFrom(const AddFileQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFileQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileQuery::CopyFrom(const AddFileQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddFileQuery::Swap(AddFileQuery* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFileQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFileQuery_descriptor_;
  metadata.reflection = AddFileQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFileReply::kErrFieldNumber;
#endif  // !_MSC_VER

AddFileReply::AddFileReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFileReply::InitAsDefaultInstance() {
}

AddFileReply::AddFileReply(const AddFileReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFileReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFileReply::~AddFileReply() {
  SharedDtor();
}

void AddFileReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFileReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFileReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFileReply_descriptor_;
}

const AddFileReply& AddFileReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

AddFileReply* AddFileReply::default_instance_ = NULL;

AddFileReply* AddFileReply::New() const {
  return new AddFileReply;
}

void AddFileReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFileReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFileReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFileReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFileReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFileReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFileReply::MergeFrom(const AddFileReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFileReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileReply::CopyFrom(const AddFileReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddFileReply::Swap(AddFileReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFileReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFileReply_descriptor_;
  metadata.reflection = AddFileReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFileQuery::kFilenameFieldNumber;
const int CreateFileQuery::kSizeFieldNumber;
const int CreateFileQuery::kStartTimeFieldNumber;
const int CreateFileQuery::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CreateFileQuery::CreateFileQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFileQuery::InitAsDefaultInstance() {
}

CreateFileQuery::CreateFileQuery(const CreateFileQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFileQuery::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_LONGLONG(0);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFileQuery::~CreateFileQuery() {
  SharedDtor();
}

void CreateFileQuery::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CreateFileQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFileQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFileQuery_descriptor_;
}

const CreateFileQuery& CreateFileQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

CreateFileQuery* CreateFileQuery::default_instance_ = NULL;

CreateFileQuery* CreateFileQuery::New() const {
  return new CreateFileQuery;
}

void CreateFileQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    size_ = GOOGLE_LONGLONG(0);
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFileQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFileQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->filename(), output);
  }

  // required int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFileQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes filename = 1;
  if (has_filename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->filename(), target);
  }

  // required int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFileQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }

    // required int64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFileQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFileQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFileQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFileQuery::MergeFrom(const CreateFileQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFileQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFileQuery::CopyFrom(const CreateFileQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CreateFileQuery::Swap(CreateFileQuery* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(size_, other->size_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFileQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFileQuery_descriptor_;
  metadata.reflection = CreateFileQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFileReply::kErrFieldNumber;
#endif  // !_MSC_VER

CreateFileReply::CreateFileReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFileReply::InitAsDefaultInstance() {
}

CreateFileReply::CreateFileReply(const CreateFileReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFileReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFileReply::~CreateFileReply() {
  SharedDtor();
}

void CreateFileReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateFileReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFileReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFileReply_descriptor_;
}

const CreateFileReply& CreateFileReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

CreateFileReply* CreateFileReply::default_instance_ = NULL;

CreateFileReply* CreateFileReply::New() const {
  return new CreateFileReply;
}

void CreateFileReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFileReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFileReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFileReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFileReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFileReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFileReply::MergeFrom(const CreateFileReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFileReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFileReply::CopyFrom(const CreateFileReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateFileReply::Swap(CreateFileReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFileReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFileReply_descriptor_;
  metadata.reflection = CreateFileReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFileQuery::kStartTimeFieldNumber;
const int DeleteFileQuery::kFileNameFieldNumber;
#endif  // !_MSC_VER

DeleteFileQuery::DeleteFileQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFileQuery::InitAsDefaultInstance() {
}

DeleteFileQuery::DeleteFileQuery(const DeleteFileQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFileQuery::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFileQuery::~DeleteFileQuery() {
  SharedDtor();
}

void DeleteFileQuery::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFileQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileQuery_descriptor_;
}

const DeleteFileQuery& DeleteFileQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DeleteFileQuery* DeleteFileQuery::default_instance_ = NULL;

DeleteFileQuery* DeleteFileQuery::New() const {
  return new DeleteFileQuery;
}

void DeleteFileQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = GOOGLE_LONGLONG(0);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFileQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // required bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFileQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // required bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFileQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // required bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFileQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFileQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFileQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFileQuery::MergeFrom(const DeleteFileQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFileQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileQuery::CopyFrom(const DeleteFileQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteFileQuery::Swap(DeleteFileQuery* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFileQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileQuery_descriptor_;
  metadata.reflection = DeleteFileQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFileReply::kErrFieldNumber;
#endif  // !_MSC_VER

DeleteFileReply::DeleteFileReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFileReply::InitAsDefaultInstance() {
}

DeleteFileReply::DeleteFileReply(const DeleteFileReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFileReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFileReply::~DeleteFileReply() {
  SharedDtor();
}

void DeleteFileReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFileReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileReply_descriptor_;
}

const DeleteFileReply& DeleteFileReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

DeleteFileReply* DeleteFileReply::default_instance_ = NULL;

DeleteFileReply* DeleteFileReply::New() const {
  return new DeleteFileReply;
}

void DeleteFileReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFileReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFileReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFileReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFileReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFileReply::MergeFrom(const DeleteFileReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFileReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileReply::CopyFrom(const DeleteFileReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteFileReply::Swap(DeleteFileReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFileReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileReply_descriptor_;
  metadata.reflection = DeleteFileReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RebuildIndexQuery::kFilenameFieldNumber;
const int RebuildIndexQuery::kStartTimeFieldNumber;
#endif  // !_MSC_VER

RebuildIndexQuery::RebuildIndexQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RebuildIndexQuery::InitAsDefaultInstance() {
}

RebuildIndexQuery::RebuildIndexQuery(const RebuildIndexQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RebuildIndexQuery::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebuildIndexQuery::~RebuildIndexQuery() {
  SharedDtor();
}

void RebuildIndexQuery::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void RebuildIndexQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebuildIndexQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebuildIndexQuery_descriptor_;
}

const RebuildIndexQuery& RebuildIndexQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

RebuildIndexQuery* RebuildIndexQuery::default_instance_ = NULL;

RebuildIndexQuery* RebuildIndexQuery::New() const {
  return new RebuildIndexQuery;
}

void RebuildIndexQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebuildIndexQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RebuildIndexQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->filename(), output);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RebuildIndexQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes filename = 1;
  if (has_filename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->filename(), target);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RebuildIndexQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }

    // required int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebuildIndexQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebuildIndexQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebuildIndexQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebuildIndexQuery::MergeFrom(const RebuildIndexQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebuildIndexQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebuildIndexQuery::CopyFrom(const RebuildIndexQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebuildIndexQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RebuildIndexQuery::Swap(RebuildIndexQuery* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebuildIndexQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebuildIndexQuery_descriptor_;
  metadata.reflection = RebuildIndexQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RebuildIndexReply::kErrFieldNumber;
#endif  // !_MSC_VER

RebuildIndexReply::RebuildIndexReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RebuildIndexReply::InitAsDefaultInstance() {
}

RebuildIndexReply::RebuildIndexReply(const RebuildIndexReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RebuildIndexReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebuildIndexReply::~RebuildIndexReply() {
  SharedDtor();
}

void RebuildIndexReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RebuildIndexReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebuildIndexReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebuildIndexReply_descriptor_;
}

const RebuildIndexReply& RebuildIndexReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datas_2eproto();
  return *default_instance_;
}

RebuildIndexReply* RebuildIndexReply::default_instance_ = NULL;

RebuildIndexReply* RebuildIndexReply::New() const {
  return new RebuildIndexReply;
}

void RebuildIndexReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebuildIndexReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RebuildIndexReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RebuildIndexReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RebuildIndexReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebuildIndexReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebuildIndexReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebuildIndexReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebuildIndexReply::MergeFrom(const RebuildIndexReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebuildIndexReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebuildIndexReply::CopyFrom(const RebuildIndexReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebuildIndexReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RebuildIndexReply::Swap(RebuildIndexReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebuildIndexReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebuildIndexReply_descriptor_;
  metadata.reflection = RebuildIndexReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Datas

// @@protoc_insertion_point(global_scope)
