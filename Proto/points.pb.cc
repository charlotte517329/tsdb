// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: points.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "points.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Points {

namespace {

const ::google::protobuf::Descriptor* TypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTypeQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTypeQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTypeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTypeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTypeQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTypeQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTypeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTypeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypesNumQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypesNumQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypesNumReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypesNumReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypesQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypesQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypeByIDQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypeByIDQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTypeByIDReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTypeByIDReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTableQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTableQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTableReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTableReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTablesNumQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTablesNumQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTablesNumReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTablesNumReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTablesQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTablesQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTablesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTablesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTablesReply_TableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTablesReply_TableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableByIDQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableByIDQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableByIDReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableByIDReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPointsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPointsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPointsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPointsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePointQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePointQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsNumQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsNumQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsNumByIDQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsNumByIDQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsNumReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsNumReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsByIDQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsByIDQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchPointsReply_PointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchPointsReply_PointInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_points_2eproto() {
  protobuf_AddDesc_points_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "points.proto");
  GOOGLE_CHECK(file != NULL);
  TypeInfo_descriptor_ = file->message_type(0);
  static const int TypeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, type_names_),
  };
  TypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeInfo_descriptor_,
      TypeInfo::default_instance_,
      TypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeInfo));
  AddTypeQuery_descriptor_ = file->message_type(1);
  static const int AddTypeQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeQuery, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeQuery, type_names_),
  };
  AddTypeQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTypeQuery_descriptor_,
      AddTypeQuery::default_instance_,
      AddTypeQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTypeQuery));
  AddTypeReply_descriptor_ = file->message_type(2);
  static const int AddTypeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeReply, err_),
  };
  AddTypeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTypeReply_descriptor_,
      AddTypeReply::default_instance_,
      AddTypeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTypeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTypeReply));
  DeleteTypeQuery_descriptor_ = file->message_type(3);
  static const int DeleteTypeQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeQuery, id_),
  };
  DeleteTypeQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTypeQuery_descriptor_,
      DeleteTypeQuery::default_instance_,
      DeleteTypeQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTypeQuery));
  DeleteTypeReply_descriptor_ = file->message_type(4);
  static const int DeleteTypeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeReply, err_),
  };
  DeleteTypeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTypeReply_descriptor_,
      DeleteTypeReply::default_instance_,
      DeleteTypeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTypeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTypeReply));
  GetTypesNumQuery_descriptor_ = file->message_type(5);
  static const int GetTypesNumQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumQuery, unused_),
  };
  GetTypesNumQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypesNumQuery_descriptor_,
      GetTypesNumQuery::default_instance_,
      GetTypesNumQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypesNumQuery));
  GetTypesNumReply_descriptor_ = file->message_type(6);
  static const int GetTypesNumReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumReply, num_),
  };
  GetTypesNumReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypesNumReply_descriptor_,
      GetTypesNumReply::default_instance_,
      GetTypesNumReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesNumReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypesNumReply));
  GetTypesQuery_descriptor_ = file->message_type(7);
  static const int GetTypesQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesQuery, num_),
  };
  GetTypesQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypesQuery_descriptor_,
      GetTypesQuery::default_instance_,
      GetTypesQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypesQuery));
  GetTypesReply_descriptor_ = file->message_type(8);
  static const int GetTypesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesReply, type_info_array_),
  };
  GetTypesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypesReply_descriptor_,
      GetTypesReply::default_instance_,
      GetTypesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypesReply));
  GetTypeByIDQuery_descriptor_ = file->message_type(9);
  static const int GetTypeByIDQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDQuery, id_),
  };
  GetTypeByIDQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypeByIDQuery_descriptor_,
      GetTypeByIDQuery::default_instance_,
      GetTypeByIDQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypeByIDQuery));
  GetTypeByIDReply_descriptor_ = file->message_type(10);
  static const int GetTypeByIDReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDReply, info_),
  };
  GetTypeByIDReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTypeByIDReply_descriptor_,
      GetTypeByIDReply::default_instance_,
      GetTypeByIDReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTypeByIDReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTypeByIDReply));
  AddTableQuery_descriptor_ = file->message_type(11);
  static const int AddTableQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableQuery, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableQuery, name_),
  };
  AddTableQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTableQuery_descriptor_,
      AddTableQuery::default_instance_,
      AddTableQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTableQuery));
  AddTableReply_descriptor_ = file->message_type(12);
  static const int AddTableReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableReply, err_),
  };
  AddTableReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTableReply_descriptor_,
      AddTableReply::default_instance_,
      AddTableReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTableReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTableReply));
  DeleteTableQuery_descriptor_ = file->message_type(13);
  static const int DeleteTableQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableQuery, id_),
  };
  DeleteTableQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTableQuery_descriptor_,
      DeleteTableQuery::default_instance_,
      DeleteTableQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTableQuery));
  DeleteTableReply_descriptor_ = file->message_type(14);
  static const int DeleteTableReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableReply, err_),
  };
  DeleteTableReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTableReply_descriptor_,
      DeleteTableReply::default_instance_,
      DeleteTableReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTableReply));
  GetTablesNumQuery_descriptor_ = file->message_type(15);
  static const int GetTablesNumQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumQuery, unused_),
  };
  GetTablesNumQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTablesNumQuery_descriptor_,
      GetTablesNumQuery::default_instance_,
      GetTablesNumQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTablesNumQuery));
  GetTablesNumReply_descriptor_ = file->message_type(16);
  static const int GetTablesNumReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumReply, num_),
  };
  GetTablesNumReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTablesNumReply_descriptor_,
      GetTablesNumReply::default_instance_,
      GetTablesNumReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesNumReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTablesNumReply));
  GetTablesQuery_descriptor_ = file->message_type(17);
  static const int GetTablesQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesQuery, num_),
  };
  GetTablesQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTablesQuery_descriptor_,
      GetTablesQuery::default_instance_,
      GetTablesQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTablesQuery));
  GetTablesReply_descriptor_ = file->message_type(18);
  static const int GetTablesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply, table_info_array_),
  };
  GetTablesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTablesReply_descriptor_,
      GetTablesReply::default_instance_,
      GetTablesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTablesReply));
  GetTablesReply_TableInfo_descriptor_ = GetTablesReply_descriptor_->nested_type(0);
  static const int GetTablesReply_TableInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply_TableInfo, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply_TableInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply_TableInfo, id_),
  };
  GetTablesReply_TableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTablesReply_TableInfo_descriptor_,
      GetTablesReply_TableInfo::default_instance_,
      GetTablesReply_TableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply_TableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesReply_TableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTablesReply_TableInfo));
  GetTableByIDQuery_descriptor_ = file->message_type(19);
  static const int GetTableByIDQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDQuery, id_),
  };
  GetTableByIDQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableByIDQuery_descriptor_,
      GetTableByIDQuery::default_instance_,
      GetTableByIDQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableByIDQuery));
  GetTableByIDReply_descriptor_ = file->message_type(20);
  static const int GetTableByIDReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, id_),
  };
  GetTableByIDReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableByIDReply_descriptor_,
      GetTableByIDReply::default_instance_,
      GetTableByIDReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIDReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableByIDReply));
  AddPointsQuery_descriptor_ = file->message_type(21);
  static const int AddPointsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsQuery, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsQuery, point_names_),
  };
  AddPointsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPointsQuery_descriptor_,
      AddPointsQuery::default_instance_,
      AddPointsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPointsQuery));
  AddPointsReply_descriptor_ = file->message_type(22);
  static const int AddPointsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsReply, suc_num_),
  };
  AddPointsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPointsReply_descriptor_,
      AddPointsReply::default_instance_,
      AddPointsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPointsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPointsReply));
  DeletePointQuery_descriptor_ = file->message_type(23);
  static const int DeletePointQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointQuery, id_),
  };
  DeletePointQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePointQuery_descriptor_,
      DeletePointQuery::default_instance_,
      DeletePointQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePointQuery));
  DeletePointReply_descriptor_ = file->message_type(24);
  static const int DeletePointReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointReply, err_),
  };
  DeletePointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePointReply_descriptor_,
      DeletePointReply::default_instance_,
      DeletePointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePointReply));
  SearchPointsNumQuery_descriptor_ = file->message_type(25);
  static const int SearchPointsNumQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumQuery, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumQuery, point_name_),
  };
  SearchPointsNumQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsNumQuery_descriptor_,
      SearchPointsNumQuery::default_instance_,
      SearchPointsNumQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsNumQuery));
  SearchPointsNumByIDQuery_descriptor_ = file->message_type(26);
  static const int SearchPointsNumByIDQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumByIDQuery, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumByIDQuery, point_name_),
  };
  SearchPointsNumByIDQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsNumByIDQuery_descriptor_,
      SearchPointsNumByIDQuery::default_instance_,
      SearchPointsNumByIDQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumByIDQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumByIDQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsNumByIDQuery));
  SearchPointsNumReply_descriptor_ = file->message_type(27);
  static const int SearchPointsNumReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumReply, num_),
  };
  SearchPointsNumReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsNumReply_descriptor_,
      SearchPointsNumReply::default_instance_,
      SearchPointsNumReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsNumReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsNumReply));
  SearchPointsQuery_descriptor_ = file->message_type(28);
  static const int SearchPointsQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsQuery, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsQuery, point_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsQuery, from_id_),
  };
  SearchPointsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsQuery_descriptor_,
      SearchPointsQuery::default_instance_,
      SearchPointsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsQuery));
  SearchPointsByIDQuery_descriptor_ = file->message_type(29);
  static const int SearchPointsByIDQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsByIDQuery, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsByIDQuery, point_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsByIDQuery, from_id_),
  };
  SearchPointsByIDQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsByIDQuery_descriptor_,
      SearchPointsByIDQuery::default_instance_,
      SearchPointsByIDQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsByIDQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsByIDQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsByIDQuery));
  SearchPointsReply_descriptor_ = file->message_type(30);
  static const int SearchPointsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply, point_info_array_),
  };
  SearchPointsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsReply_descriptor_,
      SearchPointsReply::default_instance_,
      SearchPointsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsReply));
  SearchPointsReply_PointInfo_descriptor_ = SearchPointsReply_descriptor_->nested_type(0);
  static const int SearchPointsReply_PointInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply_PointInfo, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply_PointInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply_PointInfo, id_),
  };
  SearchPointsReply_PointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchPointsReply_PointInfo_descriptor_,
      SearchPointsReply_PointInfo::default_instance_,
      SearchPointsReply_PointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply_PointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchPointsReply_PointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchPointsReply_PointInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_points_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeInfo_descriptor_, &TypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTypeQuery_descriptor_, &AddTypeQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTypeReply_descriptor_, &AddTypeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTypeQuery_descriptor_, &DeleteTypeQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTypeReply_descriptor_, &DeleteTypeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypesNumQuery_descriptor_, &GetTypesNumQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypesNumReply_descriptor_, &GetTypesNumReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypesQuery_descriptor_, &GetTypesQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypesReply_descriptor_, &GetTypesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypeByIDQuery_descriptor_, &GetTypeByIDQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTypeByIDReply_descriptor_, &GetTypeByIDReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTableQuery_descriptor_, &AddTableQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTableReply_descriptor_, &AddTableReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTableQuery_descriptor_, &DeleteTableQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTableReply_descriptor_, &DeleteTableReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTablesNumQuery_descriptor_, &GetTablesNumQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTablesNumReply_descriptor_, &GetTablesNumReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTablesQuery_descriptor_, &GetTablesQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTablesReply_descriptor_, &GetTablesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTablesReply_TableInfo_descriptor_, &GetTablesReply_TableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableByIDQuery_descriptor_, &GetTableByIDQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableByIDReply_descriptor_, &GetTableByIDReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPointsQuery_descriptor_, &AddPointsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPointsReply_descriptor_, &AddPointsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePointQuery_descriptor_, &DeletePointQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePointReply_descriptor_, &DeletePointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsNumQuery_descriptor_, &SearchPointsNumQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsNumByIDQuery_descriptor_, &SearchPointsNumByIDQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsNumReply_descriptor_, &SearchPointsNumReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsQuery_descriptor_, &SearchPointsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsByIDQuery_descriptor_, &SearchPointsByIDQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsReply_descriptor_, &SearchPointsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchPointsReply_PointInfo_descriptor_, &SearchPointsReply_PointInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_points_2eproto() {
  delete TypeInfo::default_instance_;
  delete TypeInfo_reflection_;
  delete AddTypeQuery::default_instance_;
  delete AddTypeQuery_reflection_;
  delete AddTypeReply::default_instance_;
  delete AddTypeReply_reflection_;
  delete DeleteTypeQuery::default_instance_;
  delete DeleteTypeQuery_reflection_;
  delete DeleteTypeReply::default_instance_;
  delete DeleteTypeReply_reflection_;
  delete GetTypesNumQuery::default_instance_;
  delete GetTypesNumQuery_reflection_;
  delete GetTypesNumReply::default_instance_;
  delete GetTypesNumReply_reflection_;
  delete GetTypesQuery::default_instance_;
  delete GetTypesQuery_reflection_;
  delete GetTypesReply::default_instance_;
  delete GetTypesReply_reflection_;
  delete GetTypeByIDQuery::default_instance_;
  delete GetTypeByIDQuery_reflection_;
  delete GetTypeByIDReply::default_instance_;
  delete GetTypeByIDReply_reflection_;
  delete AddTableQuery::default_instance_;
  delete AddTableQuery_reflection_;
  delete AddTableReply::default_instance_;
  delete AddTableReply_reflection_;
  delete DeleteTableQuery::default_instance_;
  delete DeleteTableQuery_reflection_;
  delete DeleteTableReply::default_instance_;
  delete DeleteTableReply_reflection_;
  delete GetTablesNumQuery::default_instance_;
  delete GetTablesNumQuery_reflection_;
  delete GetTablesNumReply::default_instance_;
  delete GetTablesNumReply_reflection_;
  delete GetTablesQuery::default_instance_;
  delete GetTablesQuery_reflection_;
  delete GetTablesReply::default_instance_;
  delete GetTablesReply_reflection_;
  delete GetTablesReply_TableInfo::default_instance_;
  delete GetTablesReply_TableInfo_reflection_;
  delete GetTableByIDQuery::default_instance_;
  delete GetTableByIDQuery_reflection_;
  delete GetTableByIDReply::default_instance_;
  delete GetTableByIDReply_reflection_;
  delete AddPointsQuery::default_instance_;
  delete AddPointsQuery_reflection_;
  delete AddPointsReply::default_instance_;
  delete AddPointsReply_reflection_;
  delete DeletePointQuery::default_instance_;
  delete DeletePointQuery_reflection_;
  delete DeletePointReply::default_instance_;
  delete DeletePointReply_reflection_;
  delete SearchPointsNumQuery::default_instance_;
  delete SearchPointsNumQuery_reflection_;
  delete SearchPointsNumByIDQuery::default_instance_;
  delete SearchPointsNumByIDQuery_reflection_;
  delete SearchPointsNumReply::default_instance_;
  delete SearchPointsNumReply_reflection_;
  delete SearchPointsQuery::default_instance_;
  delete SearchPointsQuery_reflection_;
  delete SearchPointsByIDQuery::default_instance_;
  delete SearchPointsByIDQuery_reflection_;
  delete SearchPointsReply::default_instance_;
  delete SearchPointsReply_reflection_;
  delete SearchPointsReply_PointInfo::default_instance_;
  delete SearchPointsReply_PointInfo_reflection_;
}

void protobuf_AddDesc_points_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014points.proto\022\006Points\"F\n\010TypeInfo\022\014\n\004ty"
    "pe\030\001 \002(\014\022\014\n\004name\030\002 \002(\014\022\n\n\002id\030\003 \002(\005\022\022\n\nty"
    "pe_names\030\004 \002(\014\">\n\014AddTypeQuery\022\014\n\004type\030\001"
    " \002(\014\022\014\n\004name\030\002 \002(\014\022\022\n\ntype_names\030\003 \002(\014\"\033"
    "\n\014AddTypeReply\022\013\n\003err\030\001 \002(\005\"\035\n\017DeleteTyp"
    "eQuery\022\n\n\002id\030\001 \002(\005\"\036\n\017DeleteTypeReply\022\013\n"
    "\003err\030\001 \002(\005\"\"\n\020GetTypesNumQuery\022\016\n\006unused"
    "\030\001 \002(\005\",\n\020GetTypesNumReply\022\013\n\003err\030\001 \002(\005\022"
    "\013\n\003num\030\002 \001(\005\"\034\n\rGetTypesQuery\022\013\n\003num\030\001 \002"
    "(\005\"G\n\rGetTypesReply\022\013\n\003err\030\001 \002(\005\022)\n\017type"
    "_info_array\030\002 \003(\0132\020.Points.TypeInfo\"\036\n\020G"
    "etTypeByIDQuery\022\n\n\002id\030\001 \002(\005\"\?\n\020GetTypeBy"
    "IDReply\022\013\n\003err\030\001 \002(\005\022\036\n\004info\030\002 \001(\0132\020.Poi"
    "nts.TypeInfo\".\n\rAddTableQuery\022\017\n\007type_id"
    "\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\"\034\n\rAddTableReply\022\013\n"
    "\003err\030\001 \002(\005\"\036\n\020DeleteTableQuery\022\n\n\002id\030\001 \002"
    "(\005\"\037\n\020DeleteTableReply\022\013\n\003err\030\001 \002(\005\"#\n\021G"
    "etTablesNumQuery\022\016\n\006unused\030\001 \002(\005\"-\n\021GetT"
    "ablesNumReply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\""
    "\035\n\016GetTablesQuery\022\013\n\003num\030\001 \002(\005\"\221\001\n\016GetTa"
    "blesReply\022\013\n\003err\030\001 \002(\005\022:\n\020table_info_arr"
    "ay\030\002 \003(\0132 .Points.GetTablesReply.TableIn"
    "fo\0326\n\tTableInfo\022\017\n\007type_id\030\001 \002(\005\022\014\n\004name"
    "\030\002 \002(\014\022\n\n\002id\030\003 \002(\005\"\037\n\021GetTableByIDQuery\022"
    "\n\n\002id\030\001 \002(\005\"K\n\021GetTableByIDReply\022\013\n\003err\030"
    "\001 \002(\005\022\017\n\007type_id\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\n\n\002"
    "id\030\004 \001(\005\"7\n\016AddPointsQuery\022\020\n\010table_id\030\001"
    " \002(\005\022\023\n\013point_names\030\002 \003(\014\".\n\016AddPointsRe"
    "ply\022\013\n\003err\030\001 \002(\005\022\017\n\007suc_num\030\002 \001(\005\"\036\n\020Del"
    "etePointQuery\022\n\n\002id\030\001 \002(\005\"\037\n\020DeletePoint"
    "Reply\022\013\n\003err\030\001 \002(\005\">\n\024SearchPointsNumQue"
    "ry\022\022\n\ntable_name\030\001 \002(\014\022\022\n\npoint_name\030\002 \002"
    "(\014\"@\n\030SearchPointsNumByIDQuery\022\020\n\010table_"
    "id\030\001 \002(\005\022\022\n\npoint_name\030\002 \002(\014\"0\n\024SearchPo"
    "intsNumReply\022\013\n\003err\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\"L"
    "\n\021SearchPointsQuery\022\022\n\ntable_name\030\001 \002(\014\022"
    "\022\n\npoint_name\030\002 \002(\014\022\017\n\007from_id\030\003 \002(\005\"N\n\025"
    "SearchPointsByIDQuery\022\020\n\010table_id\030\001 \002(\005\022"
    "\022\n\npoint_name\030\002 \002(\014\022\017\n\007from_id\030\003 \002(\005\"\230\001\n"
    "\021SearchPointsReply\022\013\n\003err\030\001 \002(\005\022=\n\020point"
    "_info_array\030\002 \003(\0132#.Points.SearchPointsR"
    "eply.PointInfo\0327\n\tPointInfo\022\020\n\010table_id\030"
    "\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\n\n\002id\030\003 \002(\005", 1711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "points.proto", &protobuf_RegisterTypes);
  TypeInfo::default_instance_ = new TypeInfo();
  AddTypeQuery::default_instance_ = new AddTypeQuery();
  AddTypeReply::default_instance_ = new AddTypeReply();
  DeleteTypeQuery::default_instance_ = new DeleteTypeQuery();
  DeleteTypeReply::default_instance_ = new DeleteTypeReply();
  GetTypesNumQuery::default_instance_ = new GetTypesNumQuery();
  GetTypesNumReply::default_instance_ = new GetTypesNumReply();
  GetTypesQuery::default_instance_ = new GetTypesQuery();
  GetTypesReply::default_instance_ = new GetTypesReply();
  GetTypeByIDQuery::default_instance_ = new GetTypeByIDQuery();
  GetTypeByIDReply::default_instance_ = new GetTypeByIDReply();
  AddTableQuery::default_instance_ = new AddTableQuery();
  AddTableReply::default_instance_ = new AddTableReply();
  DeleteTableQuery::default_instance_ = new DeleteTableQuery();
  DeleteTableReply::default_instance_ = new DeleteTableReply();
  GetTablesNumQuery::default_instance_ = new GetTablesNumQuery();
  GetTablesNumReply::default_instance_ = new GetTablesNumReply();
  GetTablesQuery::default_instance_ = new GetTablesQuery();
  GetTablesReply::default_instance_ = new GetTablesReply();
  GetTablesReply_TableInfo::default_instance_ = new GetTablesReply_TableInfo();
  GetTableByIDQuery::default_instance_ = new GetTableByIDQuery();
  GetTableByIDReply::default_instance_ = new GetTableByIDReply();
  AddPointsQuery::default_instance_ = new AddPointsQuery();
  AddPointsReply::default_instance_ = new AddPointsReply();
  DeletePointQuery::default_instance_ = new DeletePointQuery();
  DeletePointReply::default_instance_ = new DeletePointReply();
  SearchPointsNumQuery::default_instance_ = new SearchPointsNumQuery();
  SearchPointsNumByIDQuery::default_instance_ = new SearchPointsNumByIDQuery();
  SearchPointsNumReply::default_instance_ = new SearchPointsNumReply();
  SearchPointsQuery::default_instance_ = new SearchPointsQuery();
  SearchPointsByIDQuery::default_instance_ = new SearchPointsByIDQuery();
  SearchPointsReply::default_instance_ = new SearchPointsReply();
  SearchPointsReply_PointInfo::default_instance_ = new SearchPointsReply_PointInfo();
  TypeInfo::default_instance_->InitAsDefaultInstance();
  AddTypeQuery::default_instance_->InitAsDefaultInstance();
  AddTypeReply::default_instance_->InitAsDefaultInstance();
  DeleteTypeQuery::default_instance_->InitAsDefaultInstance();
  DeleteTypeReply::default_instance_->InitAsDefaultInstance();
  GetTypesNumQuery::default_instance_->InitAsDefaultInstance();
  GetTypesNumReply::default_instance_->InitAsDefaultInstance();
  GetTypesQuery::default_instance_->InitAsDefaultInstance();
  GetTypesReply::default_instance_->InitAsDefaultInstance();
  GetTypeByIDQuery::default_instance_->InitAsDefaultInstance();
  GetTypeByIDReply::default_instance_->InitAsDefaultInstance();
  AddTableQuery::default_instance_->InitAsDefaultInstance();
  AddTableReply::default_instance_->InitAsDefaultInstance();
  DeleteTableQuery::default_instance_->InitAsDefaultInstance();
  DeleteTableReply::default_instance_->InitAsDefaultInstance();
  GetTablesNumQuery::default_instance_->InitAsDefaultInstance();
  GetTablesNumReply::default_instance_->InitAsDefaultInstance();
  GetTablesQuery::default_instance_->InitAsDefaultInstance();
  GetTablesReply::default_instance_->InitAsDefaultInstance();
  GetTablesReply_TableInfo::default_instance_->InitAsDefaultInstance();
  GetTableByIDQuery::default_instance_->InitAsDefaultInstance();
  GetTableByIDReply::default_instance_->InitAsDefaultInstance();
  AddPointsQuery::default_instance_->InitAsDefaultInstance();
  AddPointsReply::default_instance_->InitAsDefaultInstance();
  DeletePointQuery::default_instance_->InitAsDefaultInstance();
  DeletePointReply::default_instance_->InitAsDefaultInstance();
  SearchPointsNumQuery::default_instance_->InitAsDefaultInstance();
  SearchPointsNumByIDQuery::default_instance_->InitAsDefaultInstance();
  SearchPointsNumReply::default_instance_->InitAsDefaultInstance();
  SearchPointsQuery::default_instance_->InitAsDefaultInstance();
  SearchPointsByIDQuery::default_instance_->InitAsDefaultInstance();
  SearchPointsReply::default_instance_->InitAsDefaultInstance();
  SearchPointsReply_PointInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_points_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_points_2eproto {
  StaticDescriptorInitializer_points_2eproto() {
    protobuf_AddDesc_points_2eproto();
  }
} static_descriptor_initializer_points_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TypeInfo::kTypeFieldNumber;
const int TypeInfo::kNameFieldNumber;
const int TypeInfo::kIdFieldNumber;
const int TypeInfo::kTypeNamesFieldNumber;
#endif  // !_MSC_VER

TypeInfo::TypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeInfo::InitAsDefaultInstance() {
}

TypeInfo::TypeInfo(const TypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeInfo::~TypeInfo() {
  SharedDtor();
}

void TypeInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    delete type_names_;
  }
  if (this != default_instance_) {
  }
}

void TypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeInfo_descriptor_;
}

const TypeInfo& TypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

TypeInfo* TypeInfo::default_instance_ = NULL;

TypeInfo* TypeInfo::New() const {
  return new TypeInfo;
}

void TypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    if (has_type_names()) {
      if (type_names_ != &::google::protobuf::internal::kEmptyString) {
        type_names_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type_names;
        break;
      }

      // required bytes type_names = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->type(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required bytes type_names = 4;
  if (has_type_names()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->type_names(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required bytes type_names = 4;
  if (has_type_names()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->type_names(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bytes type_names = 4;
    if (has_type_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_names());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeInfo::MergeFrom(const TypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type_names()) {
      set_type_names(from.type_names());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeInfo::CopyFrom(const TypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TypeInfo::Swap(TypeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(type_names_, other->type_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeInfo_descriptor_;
  metadata.reflection = TypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTypeQuery::kTypeFieldNumber;
const int AddTypeQuery::kNameFieldNumber;
const int AddTypeQuery::kTypeNamesFieldNumber;
#endif  // !_MSC_VER

AddTypeQuery::AddTypeQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTypeQuery::InitAsDefaultInstance() {
}

AddTypeQuery::AddTypeQuery(const AddTypeQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTypeQuery::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTypeQuery::~AddTypeQuery() {
  SharedDtor();
}

void AddTypeQuery::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    delete type_names_;
  }
  if (this != default_instance_) {
  }
}

void AddTypeQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTypeQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTypeQuery_descriptor_;
}

const AddTypeQuery& AddTypeQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddTypeQuery* AddTypeQuery::default_instance_ = NULL;

AddTypeQuery* AddTypeQuery::New() const {
  return new AddTypeQuery;
}

void AddTypeQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type_names()) {
      if (type_names_ != &::google::protobuf::internal::kEmptyString) {
        type_names_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTypeQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type_names;
        break;
      }

      // required bytes type_names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddTypeQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->type(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required bytes type_names = 3;
  if (has_type_names()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->type_names(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTypeQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes type_names = 3;
  if (has_type_names()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type_names(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTypeQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes type_names = 3;
    if (has_type_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_names());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTypeQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTypeQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTypeQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTypeQuery::MergeFrom(const AddTypeQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type_names()) {
      set_type_names(from.type_names());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTypeQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTypeQuery::CopyFrom(const AddTypeQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTypeQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddTypeQuery::Swap(AddTypeQuery* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(type_names_, other->type_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTypeQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTypeQuery_descriptor_;
  metadata.reflection = AddTypeQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTypeReply::kErrFieldNumber;
#endif  // !_MSC_VER

AddTypeReply::AddTypeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTypeReply::InitAsDefaultInstance() {
}

AddTypeReply::AddTypeReply(const AddTypeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTypeReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTypeReply::~AddTypeReply() {
  SharedDtor();
}

void AddTypeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTypeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTypeReply_descriptor_;
}

const AddTypeReply& AddTypeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddTypeReply* AddTypeReply::default_instance_ = NULL;

AddTypeReply* AddTypeReply::New() const {
  return new AddTypeReply;
}

void AddTypeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTypeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTypeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTypeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTypeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTypeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTypeReply::MergeFrom(const AddTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTypeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTypeReply::CopyFrom(const AddTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTypeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddTypeReply::Swap(AddTypeReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTypeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTypeReply_descriptor_;
  metadata.reflection = AddTypeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTypeQuery::kIdFieldNumber;
#endif  // !_MSC_VER

DeleteTypeQuery::DeleteTypeQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTypeQuery::InitAsDefaultInstance() {
}

DeleteTypeQuery::DeleteTypeQuery(const DeleteTypeQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTypeQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTypeQuery::~DeleteTypeQuery() {
  SharedDtor();
}

void DeleteTypeQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteTypeQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTypeQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTypeQuery_descriptor_;
}

const DeleteTypeQuery& DeleteTypeQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeleteTypeQuery* DeleteTypeQuery::default_instance_ = NULL;

DeleteTypeQuery* DeleteTypeQuery::New() const {
  return new DeleteTypeQuery;
}

void DeleteTypeQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTypeQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTypeQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTypeQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTypeQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTypeQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTypeQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTypeQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTypeQuery::MergeFrom(const DeleteTypeQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTypeQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTypeQuery::CopyFrom(const DeleteTypeQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTypeQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTypeQuery::Swap(DeleteTypeQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTypeQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTypeQuery_descriptor_;
  metadata.reflection = DeleteTypeQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTypeReply::kErrFieldNumber;
#endif  // !_MSC_VER

DeleteTypeReply::DeleteTypeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTypeReply::InitAsDefaultInstance() {
}

DeleteTypeReply::DeleteTypeReply(const DeleteTypeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTypeReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTypeReply::~DeleteTypeReply() {
  SharedDtor();
}

void DeleteTypeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTypeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTypeReply_descriptor_;
}

const DeleteTypeReply& DeleteTypeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeleteTypeReply* DeleteTypeReply::default_instance_ = NULL;

DeleteTypeReply* DeleteTypeReply::New() const {
  return new DeleteTypeReply;
}

void DeleteTypeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTypeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTypeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTypeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTypeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTypeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTypeReply::MergeFrom(const DeleteTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTypeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTypeReply::CopyFrom(const DeleteTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTypeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTypeReply::Swap(DeleteTypeReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTypeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTypeReply_descriptor_;
  metadata.reflection = DeleteTypeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypesNumQuery::kUnusedFieldNumber;
#endif  // !_MSC_VER

GetTypesNumQuery::GetTypesNumQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypesNumQuery::InitAsDefaultInstance() {
}

GetTypesNumQuery::GetTypesNumQuery(const GetTypesNumQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypesNumQuery::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypesNumQuery::~GetTypesNumQuery() {
  SharedDtor();
}

void GetTypesNumQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTypesNumQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypesNumQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypesNumQuery_descriptor_;
}

const GetTypesNumQuery& GetTypesNumQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypesNumQuery* GetTypesNumQuery::default_instance_ = NULL;

GetTypesNumQuery* GetTypesNumQuery::New() const {
  return new GetTypesNumQuery;
}

void GetTypesNumQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypesNumQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypesNumQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypesNumQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypesNumQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypesNumQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypesNumQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypesNumQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypesNumQuery::MergeFrom(const GetTypesNumQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypesNumQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypesNumQuery::CopyFrom(const GetTypesNumQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypesNumQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTypesNumQuery::Swap(GetTypesNumQuery* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypesNumQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypesNumQuery_descriptor_;
  metadata.reflection = GetTypesNumQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypesNumReply::kErrFieldNumber;
const int GetTypesNumReply::kNumFieldNumber;
#endif  // !_MSC_VER

GetTypesNumReply::GetTypesNumReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypesNumReply::InitAsDefaultInstance() {
}

GetTypesNumReply::GetTypesNumReply(const GetTypesNumReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypesNumReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypesNumReply::~GetTypesNumReply() {
  SharedDtor();
}

void GetTypesNumReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTypesNumReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypesNumReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypesNumReply_descriptor_;
}

const GetTypesNumReply& GetTypesNumReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypesNumReply* GetTypesNumReply::default_instance_ = NULL;

GetTypesNumReply* GetTypesNumReply::New() const {
  return new GetTypesNumReply;
}

void GetTypesNumReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypesNumReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypesNumReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypesNumReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypesNumReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypesNumReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypesNumReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypesNumReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypesNumReply::MergeFrom(const GetTypesNumReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypesNumReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypesNumReply::CopyFrom(const GetTypesNumReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypesNumReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTypesNumReply::Swap(GetTypesNumReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypesNumReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypesNumReply_descriptor_;
  metadata.reflection = GetTypesNumReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypesQuery::kNumFieldNumber;
#endif  // !_MSC_VER

GetTypesQuery::GetTypesQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypesQuery::InitAsDefaultInstance() {
}

GetTypesQuery::GetTypesQuery(const GetTypesQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypesQuery::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypesQuery::~GetTypesQuery() {
  SharedDtor();
}

void GetTypesQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTypesQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypesQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypesQuery_descriptor_;
}

const GetTypesQuery& GetTypesQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypesQuery* GetTypesQuery::default_instance_ = NULL;

GetTypesQuery* GetTypesQuery::New() const {
  return new GetTypesQuery;
}

void GetTypesQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypesQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypesQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypesQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypesQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypesQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypesQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypesQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypesQuery::MergeFrom(const GetTypesQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypesQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypesQuery::CopyFrom(const GetTypesQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypesQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTypesQuery::Swap(GetTypesQuery* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypesQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypesQuery_descriptor_;
  metadata.reflection = GetTypesQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypesReply::kErrFieldNumber;
const int GetTypesReply::kTypeInfoArrayFieldNumber;
#endif  // !_MSC_VER

GetTypesReply::GetTypesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypesReply::InitAsDefaultInstance() {
}

GetTypesReply::GetTypesReply(const GetTypesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypesReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypesReply::~GetTypesReply() {
  SharedDtor();
}

void GetTypesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTypesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypesReply_descriptor_;
}

const GetTypesReply& GetTypesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypesReply* GetTypesReply::default_instance_ = NULL;

GetTypesReply* GetTypesReply::New() const {
  return new GetTypesReply;
}

void GetTypesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  type_info_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_info_array;
        break;
      }

      // repeated .Points.TypeInfo type_info_array = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_info_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_info_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_info_array;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Points.TypeInfo type_info_array = 2;
  for (int i = 0; i < this->type_info_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type_info_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Points.TypeInfo type_info_array = 2;
  for (int i = 0; i < this->type_info_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type_info_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  // repeated .Points.TypeInfo type_info_array = 2;
  total_size += 1 * this->type_info_array_size();
  for (int i = 0; i < this->type_info_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type_info_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypesReply::MergeFrom(const GetTypesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_info_array_.MergeFrom(from.type_info_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypesReply::CopyFrom(const GetTypesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypesReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < type_info_array_size(); i++) {
    if (!this->type_info_array(i).IsInitialized()) return false;
  }
  return true;
}

void GetTypesReply::Swap(GetTypesReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    type_info_array_.Swap(&other->type_info_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypesReply_descriptor_;
  metadata.reflection = GetTypesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypeByIDQuery::kIdFieldNumber;
#endif  // !_MSC_VER

GetTypeByIDQuery::GetTypeByIDQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypeByIDQuery::InitAsDefaultInstance() {
}

GetTypeByIDQuery::GetTypeByIDQuery(const GetTypeByIDQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypeByIDQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypeByIDQuery::~GetTypeByIDQuery() {
  SharedDtor();
}

void GetTypeByIDQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTypeByIDQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypeByIDQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypeByIDQuery_descriptor_;
}

const GetTypeByIDQuery& GetTypeByIDQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypeByIDQuery* GetTypeByIDQuery::default_instance_ = NULL;

GetTypeByIDQuery* GetTypeByIDQuery::New() const {
  return new GetTypeByIDQuery;
}

void GetTypeByIDQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypeByIDQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypeByIDQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypeByIDQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypeByIDQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypeByIDQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypeByIDQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypeByIDQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypeByIDQuery::MergeFrom(const GetTypeByIDQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypeByIDQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypeByIDQuery::CopyFrom(const GetTypeByIDQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypeByIDQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTypeByIDQuery::Swap(GetTypeByIDQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypeByIDQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypeByIDQuery_descriptor_;
  metadata.reflection = GetTypeByIDQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTypeByIDReply::kErrFieldNumber;
const int GetTypeByIDReply::kInfoFieldNumber;
#endif  // !_MSC_VER

GetTypeByIDReply::GetTypeByIDReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTypeByIDReply::InitAsDefaultInstance() {
  info_ = const_cast< ::Points::TypeInfo*>(&::Points::TypeInfo::default_instance());
}

GetTypeByIDReply::GetTypeByIDReply(const GetTypeByIDReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTypeByIDReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTypeByIDReply::~GetTypeByIDReply() {
  SharedDtor();
}

void GetTypeByIDReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GetTypeByIDReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTypeByIDReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTypeByIDReply_descriptor_;
}

const GetTypeByIDReply& GetTypeByIDReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTypeByIDReply* GetTypeByIDReply::default_instance_ = NULL;

GetTypeByIDReply* GetTypeByIDReply::New() const {
  return new GetTypeByIDReply;
}

void GetTypeByIDReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::Points::TypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTypeByIDReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .Points.TypeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTypeByIDReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional .Points.TypeInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTypeByIDReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional .Points.TypeInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTypeByIDReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional .Points.TypeInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTypeByIDReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTypeByIDReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTypeByIDReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTypeByIDReply::MergeFrom(const GetTypeByIDReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_info()) {
      mutable_info()->::Points::TypeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTypeByIDReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTypeByIDReply::CopyFrom(const GetTypeByIDReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTypeByIDReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GetTypeByIDReply::Swap(GetTypeByIDReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTypeByIDReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTypeByIDReply_descriptor_;
  metadata.reflection = GetTypeByIDReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTableQuery::kTypeIdFieldNumber;
const int AddTableQuery::kNameFieldNumber;
#endif  // !_MSC_VER

AddTableQuery::AddTableQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTableQuery::InitAsDefaultInstance() {
}

AddTableQuery::AddTableQuery(const AddTableQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTableQuery::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTableQuery::~AddTableQuery() {
  SharedDtor();
}

void AddTableQuery::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AddTableQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTableQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTableQuery_descriptor_;
}

const AddTableQuery& AddTableQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddTableQuery* AddTableQuery::default_instance_ = NULL;

AddTableQuery* AddTableQuery::New() const {
  return new AddTableQuery;
}

void AddTableQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTableQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddTableQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTableQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTableQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTableQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTableQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTableQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTableQuery::MergeFrom(const AddTableQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTableQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTableQuery::CopyFrom(const AddTableQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTableQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddTableQuery::Swap(AddTableQuery* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTableQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTableQuery_descriptor_;
  metadata.reflection = AddTableQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTableReply::kErrFieldNumber;
#endif  // !_MSC_VER

AddTableReply::AddTableReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTableReply::InitAsDefaultInstance() {
}

AddTableReply::AddTableReply(const AddTableReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTableReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTableReply::~AddTableReply() {
  SharedDtor();
}

void AddTableReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddTableReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTableReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTableReply_descriptor_;
}

const AddTableReply& AddTableReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddTableReply* AddTableReply::default_instance_ = NULL;

AddTableReply* AddTableReply::New() const {
  return new AddTableReply;
}

void AddTableReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTableReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddTableReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTableReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTableReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTableReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTableReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTableReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTableReply::MergeFrom(const AddTableReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTableReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTableReply::CopyFrom(const AddTableReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTableReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddTableReply::Swap(AddTableReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTableReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTableReply_descriptor_;
  metadata.reflection = AddTableReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTableQuery::kIdFieldNumber;
#endif  // !_MSC_VER

DeleteTableQuery::DeleteTableQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTableQuery::InitAsDefaultInstance() {
}

DeleteTableQuery::DeleteTableQuery(const DeleteTableQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTableQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTableQuery::~DeleteTableQuery() {
  SharedDtor();
}

void DeleteTableQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteTableQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableQuery_descriptor_;
}

const DeleteTableQuery& DeleteTableQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeleteTableQuery* DeleteTableQuery::default_instance_ = NULL;

DeleteTableQuery* DeleteTableQuery::New() const {
  return new DeleteTableQuery;
}

void DeleteTableQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTableQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTableQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTableQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTableQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTableQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTableQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTableQuery::MergeFrom(const DeleteTableQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTableQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableQuery::CopyFrom(const DeleteTableQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTableQuery::Swap(DeleteTableQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTableQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableQuery_descriptor_;
  metadata.reflection = DeleteTableQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTableReply::kErrFieldNumber;
#endif  // !_MSC_VER

DeleteTableReply::DeleteTableReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTableReply::InitAsDefaultInstance() {
}

DeleteTableReply::DeleteTableReply(const DeleteTableReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTableReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTableReply::~DeleteTableReply() {
  SharedDtor();
}

void DeleteTableReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteTableReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableReply_descriptor_;
}

const DeleteTableReply& DeleteTableReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeleteTableReply* DeleteTableReply::default_instance_ = NULL;

DeleteTableReply* DeleteTableReply::New() const {
  return new DeleteTableReply;
}

void DeleteTableReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTableReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTableReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTableReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTableReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTableReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTableReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTableReply::MergeFrom(const DeleteTableReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTableReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableReply::CopyFrom(const DeleteTableReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteTableReply::Swap(DeleteTableReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTableReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableReply_descriptor_;
  metadata.reflection = DeleteTableReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTablesNumQuery::kUnusedFieldNumber;
#endif  // !_MSC_VER

GetTablesNumQuery::GetTablesNumQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTablesNumQuery::InitAsDefaultInstance() {
}

GetTablesNumQuery::GetTablesNumQuery(const GetTablesNumQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTablesNumQuery::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTablesNumQuery::~GetTablesNumQuery() {
  SharedDtor();
}

void GetTablesNumQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTablesNumQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesNumQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTablesNumQuery_descriptor_;
}

const GetTablesNumQuery& GetTablesNumQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTablesNumQuery* GetTablesNumQuery::default_instance_ = NULL;

GetTablesNumQuery* GetTablesNumQuery::New() const {
  return new GetTablesNumQuery;
}

void GetTablesNumQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTablesNumQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTablesNumQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTablesNumQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTablesNumQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesNumQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTablesNumQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTablesNumQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTablesNumQuery::MergeFrom(const GetTablesNumQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTablesNumQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesNumQuery::CopyFrom(const GetTablesNumQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesNumQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTablesNumQuery::Swap(GetTablesNumQuery* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTablesNumQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTablesNumQuery_descriptor_;
  metadata.reflection = GetTablesNumQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTablesNumReply::kErrFieldNumber;
const int GetTablesNumReply::kNumFieldNumber;
#endif  // !_MSC_VER

GetTablesNumReply::GetTablesNumReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTablesNumReply::InitAsDefaultInstance() {
}

GetTablesNumReply::GetTablesNumReply(const GetTablesNumReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTablesNumReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTablesNumReply::~GetTablesNumReply() {
  SharedDtor();
}

void GetTablesNumReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTablesNumReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesNumReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTablesNumReply_descriptor_;
}

const GetTablesNumReply& GetTablesNumReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTablesNumReply* GetTablesNumReply::default_instance_ = NULL;

GetTablesNumReply* GetTablesNumReply::New() const {
  return new GetTablesNumReply;
}

void GetTablesNumReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTablesNumReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTablesNumReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTablesNumReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTablesNumReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesNumReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTablesNumReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTablesNumReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTablesNumReply::MergeFrom(const GetTablesNumReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTablesNumReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesNumReply::CopyFrom(const GetTablesNumReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesNumReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTablesNumReply::Swap(GetTablesNumReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTablesNumReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTablesNumReply_descriptor_;
  metadata.reflection = GetTablesNumReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTablesQuery::kNumFieldNumber;
#endif  // !_MSC_VER

GetTablesQuery::GetTablesQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTablesQuery::InitAsDefaultInstance() {
}

GetTablesQuery::GetTablesQuery(const GetTablesQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTablesQuery::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTablesQuery::~GetTablesQuery() {
  SharedDtor();
}

void GetTablesQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTablesQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTablesQuery_descriptor_;
}

const GetTablesQuery& GetTablesQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTablesQuery* GetTablesQuery::default_instance_ = NULL;

GetTablesQuery* GetTablesQuery::New() const {
  return new GetTablesQuery;
}

void GetTablesQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTablesQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTablesQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTablesQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTablesQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTablesQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTablesQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTablesQuery::MergeFrom(const GetTablesQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTablesQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesQuery::CopyFrom(const GetTablesQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTablesQuery::Swap(GetTablesQuery* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTablesQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTablesQuery_descriptor_;
  metadata.reflection = GetTablesQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTablesReply_TableInfo::kTypeIdFieldNumber;
const int GetTablesReply_TableInfo::kNameFieldNumber;
const int GetTablesReply_TableInfo::kIdFieldNumber;
#endif  // !_MSC_VER

GetTablesReply_TableInfo::GetTablesReply_TableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTablesReply_TableInfo::InitAsDefaultInstance() {
}

GetTablesReply_TableInfo::GetTablesReply_TableInfo(const GetTablesReply_TableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTablesReply_TableInfo::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTablesReply_TableInfo::~GetTablesReply_TableInfo() {
  SharedDtor();
}

void GetTablesReply_TableInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GetTablesReply_TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesReply_TableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTablesReply_TableInfo_descriptor_;
}

const GetTablesReply_TableInfo& GetTablesReply_TableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTablesReply_TableInfo* GetTablesReply_TableInfo::default_instance_ = NULL;

GetTablesReply_TableInfo* GetTablesReply_TableInfo::New() const {
  return new GetTablesReply_TableInfo;
}

void GetTablesReply_TableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTablesReply_TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTablesReply_TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTablesReply_TableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTablesReply_TableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesReply_TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTablesReply_TableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTablesReply_TableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTablesReply_TableInfo::MergeFrom(const GetTablesReply_TableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTablesReply_TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesReply_TableInfo::CopyFrom(const GetTablesReply_TableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesReply_TableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetTablesReply_TableInfo::Swap(GetTablesReply_TableInfo* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTablesReply_TableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTablesReply_TableInfo_descriptor_;
  metadata.reflection = GetTablesReply_TableInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetTablesReply::kErrFieldNumber;
const int GetTablesReply::kTableInfoArrayFieldNumber;
#endif  // !_MSC_VER

GetTablesReply::GetTablesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTablesReply::InitAsDefaultInstance() {
}

GetTablesReply::GetTablesReply(const GetTablesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTablesReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTablesReply::~GetTablesReply() {
  SharedDtor();
}

void GetTablesReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTablesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTablesReply_descriptor_;
}

const GetTablesReply& GetTablesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTablesReply* GetTablesReply::default_instance_ = NULL;

GetTablesReply* GetTablesReply::New() const {
  return new GetTablesReply;
}

void GetTablesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  table_info_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTablesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_info_array;
        break;
      }

      // repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_info_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_info_array;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTablesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
  for (int i = 0; i < this->table_info_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_info_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTablesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
  for (int i = 0; i < this->table_info_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_info_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTablesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  // repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
  total_size += 1 * this->table_info_array_size();
  for (int i = 0; i < this->table_info_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_info_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTablesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTablesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTablesReply::MergeFrom(const GetTablesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_info_array_.MergeFrom(from.table_info_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTablesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesReply::CopyFrom(const GetTablesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < table_info_array_size(); i++) {
    if (!this->table_info_array(i).IsInitialized()) return false;
  }
  return true;
}

void GetTablesReply::Swap(GetTablesReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    table_info_array_.Swap(&other->table_info_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTablesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTablesReply_descriptor_;
  metadata.reflection = GetTablesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableByIDQuery::kIdFieldNumber;
#endif  // !_MSC_VER

GetTableByIDQuery::GetTableByIDQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableByIDQuery::InitAsDefaultInstance() {
}

GetTableByIDQuery::GetTableByIDQuery(const GetTableByIDQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableByIDQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableByIDQuery::~GetTableByIDQuery() {
  SharedDtor();
}

void GetTableByIDQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTableByIDQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableByIDQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableByIDQuery_descriptor_;
}

const GetTableByIDQuery& GetTableByIDQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTableByIDQuery* GetTableByIDQuery::default_instance_ = NULL;

GetTableByIDQuery* GetTableByIDQuery::New() const {
  return new GetTableByIDQuery;
}

void GetTableByIDQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableByIDQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableByIDQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableByIDQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableByIDQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableByIDQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableByIDQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableByIDQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableByIDQuery::MergeFrom(const GetTableByIDQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableByIDQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableByIDQuery::CopyFrom(const GetTableByIDQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableByIDQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTableByIDQuery::Swap(GetTableByIDQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableByIDQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableByIDQuery_descriptor_;
  metadata.reflection = GetTableByIDQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableByIDReply::kErrFieldNumber;
const int GetTableByIDReply::kTypeIdFieldNumber;
const int GetTableByIDReply::kNameFieldNumber;
const int GetTableByIDReply::kIdFieldNumber;
#endif  // !_MSC_VER

GetTableByIDReply::GetTableByIDReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableByIDReply::InitAsDefaultInstance() {
}

GetTableByIDReply::GetTableByIDReply(const GetTableByIDReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableByIDReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  type_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableByIDReply::~GetTableByIDReply() {
  SharedDtor();
}

void GetTableByIDReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GetTableByIDReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableByIDReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableByIDReply_descriptor_;
}

const GetTableByIDReply& GetTableByIDReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

GetTableByIDReply* GetTableByIDReply::default_instance_ = NULL;

GetTableByIDReply* GetTableByIDReply::New() const {
  return new GetTableByIDReply;
}

void GetTableByIDReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    type_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableByIDReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableByIDReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableByIDReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableByIDReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableByIDReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableByIDReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableByIDReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableByIDReply::MergeFrom(const GetTableByIDReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableByIDReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableByIDReply::CopyFrom(const GetTableByIDReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableByIDReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTableByIDReply::Swap(GetTableByIDReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(type_id_, other->type_id_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableByIDReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableByIDReply_descriptor_;
  metadata.reflection = GetTableByIDReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPointsQuery::kTableIdFieldNumber;
const int AddPointsQuery::kPointNamesFieldNumber;
#endif  // !_MSC_VER

AddPointsQuery::AddPointsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPointsQuery::InitAsDefaultInstance() {
}

AddPointsQuery::AddPointsQuery(const AddPointsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPointsQuery::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPointsQuery::~AddPointsQuery() {
  SharedDtor();
}

void AddPointsQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPointsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPointsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPointsQuery_descriptor_;
}

const AddPointsQuery& AddPointsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddPointsQuery* AddPointsQuery::default_instance_ = NULL;

AddPointsQuery* AddPointsQuery::New() const {
  return new AddPointsQuery;
}

void AddPointsQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
  }
  point_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPointsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_names;
        break;
      }

      // repeated bytes point_names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_point_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPointsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // repeated bytes point_names = 2;
  for (int i = 0; i < this->point_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->point_names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPointsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // repeated bytes point_names = 2;
  for (int i = 0; i < this->point_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->point_names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPointsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  // repeated bytes point_names = 2;
  total_size += 1 * this->point_names_size();
  for (int i = 0; i < this->point_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->point_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPointsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPointsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPointsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPointsQuery::MergeFrom(const AddPointsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_names_.MergeFrom(from.point_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPointsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPointsQuery::CopyFrom(const AddPointsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPointsQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddPointsQuery::Swap(AddPointsQuery* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    point_names_.Swap(&other->point_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPointsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPointsQuery_descriptor_;
  metadata.reflection = AddPointsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPointsReply::kErrFieldNumber;
const int AddPointsReply::kSucNumFieldNumber;
#endif  // !_MSC_VER

AddPointsReply::AddPointsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPointsReply::InitAsDefaultInstance() {
}

AddPointsReply::AddPointsReply(const AddPointsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPointsReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  suc_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPointsReply::~AddPointsReply() {
  SharedDtor();
}

void AddPointsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPointsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPointsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPointsReply_descriptor_;
}

const AddPointsReply& AddPointsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

AddPointsReply* AddPointsReply::default_instance_ = NULL;

AddPointsReply* AddPointsReply::New() const {
  return new AddPointsReply;
}

void AddPointsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    suc_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPointsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suc_num;
        break;
      }

      // optional int32 suc_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suc_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suc_num_)));
          set_has_suc_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPointsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 suc_num = 2;
  if (has_suc_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->suc_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPointsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 suc_num = 2;
  if (has_suc_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->suc_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPointsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 suc_num = 2;
    if (has_suc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suc_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPointsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPointsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPointsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPointsReply::MergeFrom(const AddPointsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_suc_num()) {
      set_suc_num(from.suc_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPointsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPointsReply::CopyFrom(const AddPointsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPointsReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddPointsReply::Swap(AddPointsReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(suc_num_, other->suc_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPointsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPointsReply_descriptor_;
  metadata.reflection = AddPointsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePointQuery::kIdFieldNumber;
#endif  // !_MSC_VER

DeletePointQuery::DeletePointQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletePointQuery::InitAsDefaultInstance() {
}

DeletePointQuery::DeletePointQuery(const DeletePointQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletePointQuery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePointQuery::~DeletePointQuery() {
  SharedDtor();
}

void DeletePointQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePointQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePointQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePointQuery_descriptor_;
}

const DeletePointQuery& DeletePointQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeletePointQuery* DeletePointQuery::default_instance_ = NULL;

DeletePointQuery* DeletePointQuery::New() const {
  return new DeletePointQuery;
}

void DeletePointQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePointQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletePointQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletePointQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletePointQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePointQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePointQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePointQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePointQuery::MergeFrom(const DeletePointQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePointQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePointQuery::CopyFrom(const DeletePointQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePointQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeletePointQuery::Swap(DeletePointQuery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePointQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePointQuery_descriptor_;
  metadata.reflection = DeletePointQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePointReply::kErrFieldNumber;
#endif  // !_MSC_VER

DeletePointReply::DeletePointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletePointReply::InitAsDefaultInstance() {
}

DeletePointReply::DeletePointReply(const DeletePointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletePointReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePointReply::~DeletePointReply() {
  SharedDtor();
}

void DeletePointReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePointReply_descriptor_;
}

const DeletePointReply& DeletePointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

DeletePointReply* DeletePointReply::default_instance_ = NULL;

DeletePointReply* DeletePointReply::New() const {
  return new DeletePointReply;
}

void DeletePointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletePointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletePointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletePointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePointReply::MergeFrom(const DeletePointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePointReply::CopyFrom(const DeletePointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePointReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeletePointReply::Swap(DeletePointReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePointReply_descriptor_;
  metadata.reflection = DeletePointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsNumQuery::kTableNameFieldNumber;
const int SearchPointsNumQuery::kPointNameFieldNumber;
#endif  // !_MSC_VER

SearchPointsNumQuery::SearchPointsNumQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsNumQuery::InitAsDefaultInstance() {
}

SearchPointsNumQuery::SearchPointsNumQuery(const SearchPointsNumQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsNumQuery::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsNumQuery::~SearchPointsNumQuery() {
  SharedDtor();
}

void SearchPointsNumQuery::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPointsNumQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsNumQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsNumQuery_descriptor_;
}

const SearchPointsNumQuery& SearchPointsNumQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsNumQuery* SearchPointsNumQuery::default_instance_ = NULL;

SearchPointsNumQuery* SearchPointsNumQuery::New() const {
  return new SearchPointsNumQuery;
}

void SearchPointsNumQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_point_name()) {
      if (point_name_ != &::google::protobuf::internal::kEmptyString) {
        point_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsNumQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_name;
        break;
      }

      // required bytes point_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsNumQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->point_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsNumQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->point_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsNumQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes point_name = 2;
    if (has_point_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->point_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsNumQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsNumQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsNumQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsNumQuery::MergeFrom(const SearchPointsNumQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_point_name()) {
      set_point_name(from.point_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsNumQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsNumQuery::CopyFrom(const SearchPointsNumQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsNumQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SearchPointsNumQuery::Swap(SearchPointsNumQuery* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(point_name_, other->point_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsNumQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsNumQuery_descriptor_;
  metadata.reflection = SearchPointsNumQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsNumByIDQuery::kTableIdFieldNumber;
const int SearchPointsNumByIDQuery::kPointNameFieldNumber;
#endif  // !_MSC_VER

SearchPointsNumByIDQuery::SearchPointsNumByIDQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsNumByIDQuery::InitAsDefaultInstance() {
}

SearchPointsNumByIDQuery::SearchPointsNumByIDQuery(const SearchPointsNumByIDQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsNumByIDQuery::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsNumByIDQuery::~SearchPointsNumByIDQuery() {
  SharedDtor();
}

void SearchPointsNumByIDQuery::SharedDtor() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPointsNumByIDQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsNumByIDQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsNumByIDQuery_descriptor_;
}

const SearchPointsNumByIDQuery& SearchPointsNumByIDQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsNumByIDQuery* SearchPointsNumByIDQuery::default_instance_ = NULL;

SearchPointsNumByIDQuery* SearchPointsNumByIDQuery::New() const {
  return new SearchPointsNumByIDQuery;
}

void SearchPointsNumByIDQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
    if (has_point_name()) {
      if (point_name_ != &::google::protobuf::internal::kEmptyString) {
        point_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsNumByIDQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_name;
        break;
      }

      // required bytes point_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsNumByIDQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->point_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsNumByIDQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->point_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsNumByIDQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required bytes point_name = 2;
    if (has_point_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->point_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsNumByIDQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsNumByIDQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsNumByIDQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsNumByIDQuery::MergeFrom(const SearchPointsNumByIDQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_point_name()) {
      set_point_name(from.point_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsNumByIDQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsNumByIDQuery::CopyFrom(const SearchPointsNumByIDQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsNumByIDQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SearchPointsNumByIDQuery::Swap(SearchPointsNumByIDQuery* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(point_name_, other->point_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsNumByIDQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsNumByIDQuery_descriptor_;
  metadata.reflection = SearchPointsNumByIDQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsNumReply::kErrFieldNumber;
const int SearchPointsNumReply::kNumFieldNumber;
#endif  // !_MSC_VER

SearchPointsNumReply::SearchPointsNumReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsNumReply::InitAsDefaultInstance() {
}

SearchPointsNumReply::SearchPointsNumReply(const SearchPointsNumReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsNumReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsNumReply::~SearchPointsNumReply() {
  SharedDtor();
}

void SearchPointsNumReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchPointsNumReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsNumReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsNumReply_descriptor_;
}

const SearchPointsNumReply& SearchPointsNumReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsNumReply* SearchPointsNumReply::default_instance_ = NULL;

SearchPointsNumReply* SearchPointsNumReply::New() const {
  return new SearchPointsNumReply;
}

void SearchPointsNumReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsNumReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsNumReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsNumReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsNumReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsNumReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsNumReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsNumReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsNumReply::MergeFrom(const SearchPointsNumReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsNumReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsNumReply::CopyFrom(const SearchPointsNumReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsNumReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchPointsNumReply::Swap(SearchPointsNumReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsNumReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsNumReply_descriptor_;
  metadata.reflection = SearchPointsNumReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsQuery::kTableNameFieldNumber;
const int SearchPointsQuery::kPointNameFieldNumber;
const int SearchPointsQuery::kFromIdFieldNumber;
#endif  // !_MSC_VER

SearchPointsQuery::SearchPointsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsQuery::InitAsDefaultInstance() {
}

SearchPointsQuery::SearchPointsQuery(const SearchPointsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsQuery::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsQuery::~SearchPointsQuery() {
  SharedDtor();
}

void SearchPointsQuery::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPointsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsQuery_descriptor_;
}

const SearchPointsQuery& SearchPointsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsQuery* SearchPointsQuery::default_instance_ = NULL;

SearchPointsQuery* SearchPointsQuery::New() const {
  return new SearchPointsQuery;
}

void SearchPointsQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_point_name()) {
      if (point_name_ != &::google::protobuf::internal::kEmptyString) {
        point_name_->clear();
      }
    }
    from_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_name;
        break;
      }

      // required bytes point_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_id;
        break;
      }

      // required int32 from_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->point_name(), output);
  }

  // required int32 from_id = 3;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->point_name(), target);
  }

  // required int32 from_id = 3;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes point_name = 2;
    if (has_point_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->point_name());
    }

    // required int32 from_id = 3;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsQuery::MergeFrom(const SearchPointsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_point_name()) {
      set_point_name(from.point_name());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsQuery::CopyFrom(const SearchPointsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchPointsQuery::Swap(SearchPointsQuery* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(point_name_, other->point_name_);
    std::swap(from_id_, other->from_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsQuery_descriptor_;
  metadata.reflection = SearchPointsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsByIDQuery::kTableIdFieldNumber;
const int SearchPointsByIDQuery::kPointNameFieldNumber;
const int SearchPointsByIDQuery::kFromIdFieldNumber;
#endif  // !_MSC_VER

SearchPointsByIDQuery::SearchPointsByIDQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsByIDQuery::InitAsDefaultInstance() {
}

SearchPointsByIDQuery::SearchPointsByIDQuery(const SearchPointsByIDQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsByIDQuery::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsByIDQuery::~SearchPointsByIDQuery() {
  SharedDtor();
}

void SearchPointsByIDQuery::SharedDtor() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPointsByIDQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsByIDQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsByIDQuery_descriptor_;
}

const SearchPointsByIDQuery& SearchPointsByIDQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsByIDQuery* SearchPointsByIDQuery::default_instance_ = NULL;

SearchPointsByIDQuery* SearchPointsByIDQuery::New() const {
  return new SearchPointsByIDQuery;
}

void SearchPointsByIDQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
    if (has_point_name()) {
      if (point_name_ != &::google::protobuf::internal::kEmptyString) {
        point_name_->clear();
      }
    }
    from_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsByIDQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_name;
        break;
      }

      // required bytes point_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_id;
        break;
      }

      // required int32 from_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsByIDQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->point_name(), output);
  }

  // required int32 from_id = 3;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsByIDQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // required bytes point_name = 2;
  if (has_point_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->point_name(), target);
  }

  // required int32 from_id = 3;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsByIDQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required bytes point_name = 2;
    if (has_point_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->point_name());
    }

    // required int32 from_id = 3;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsByIDQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsByIDQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsByIDQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsByIDQuery::MergeFrom(const SearchPointsByIDQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_point_name()) {
      set_point_name(from.point_name());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsByIDQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsByIDQuery::CopyFrom(const SearchPointsByIDQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsByIDQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchPointsByIDQuery::Swap(SearchPointsByIDQuery* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(point_name_, other->point_name_);
    std::swap(from_id_, other->from_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsByIDQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsByIDQuery_descriptor_;
  metadata.reflection = SearchPointsByIDQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchPointsReply_PointInfo::kTableIdFieldNumber;
const int SearchPointsReply_PointInfo::kNameFieldNumber;
const int SearchPointsReply_PointInfo::kIdFieldNumber;
#endif  // !_MSC_VER

SearchPointsReply_PointInfo::SearchPointsReply_PointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsReply_PointInfo::InitAsDefaultInstance() {
}

SearchPointsReply_PointInfo::SearchPointsReply_PointInfo(const SearchPointsReply_PointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsReply_PointInfo::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsReply_PointInfo::~SearchPointsReply_PointInfo() {
  SharedDtor();
}

void SearchPointsReply_PointInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SearchPointsReply_PointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsReply_PointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsReply_PointInfo_descriptor_;
}

const SearchPointsReply_PointInfo& SearchPointsReply_PointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsReply_PointInfo* SearchPointsReply_PointInfo::default_instance_ = NULL;

SearchPointsReply_PointInfo* SearchPointsReply_PointInfo::New() const {
  return new SearchPointsReply_PointInfo;
}

void SearchPointsReply_PointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsReply_PointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsReply_PointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsReply_PointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsReply_PointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsReply_PointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsReply_PointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsReply_PointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsReply_PointInfo::MergeFrom(const SearchPointsReply_PointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsReply_PointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsReply_PointInfo::CopyFrom(const SearchPointsReply_PointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsReply_PointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SearchPointsReply_PointInfo::Swap(SearchPointsReply_PointInfo* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsReply_PointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsReply_PointInfo_descriptor_;
  metadata.reflection = SearchPointsReply_PointInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SearchPointsReply::kErrFieldNumber;
const int SearchPointsReply::kPointInfoArrayFieldNumber;
#endif  // !_MSC_VER

SearchPointsReply::SearchPointsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchPointsReply::InitAsDefaultInstance() {
}

SearchPointsReply::SearchPointsReply(const SearchPointsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchPointsReply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchPointsReply::~SearchPointsReply() {
  SharedDtor();
}

void SearchPointsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchPointsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchPointsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchPointsReply_descriptor_;
}

const SearchPointsReply& SearchPointsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_points_2eproto();
  return *default_instance_;
}

SearchPointsReply* SearchPointsReply::default_instance_ = NULL;

SearchPointsReply* SearchPointsReply::New() const {
  return new SearchPointsReply;
}

void SearchPointsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
  }
  point_info_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchPointsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_info_array;
        break;
      }

      // repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_info_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_info_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_info_array;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchPointsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
  for (int i = 0; i < this->point_info_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point_info_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchPointsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
  for (int i = 0; i < this->point_info_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point_info_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchPointsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  // repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
  total_size += 1 * this->point_info_array_size();
  for (int i = 0; i < this->point_info_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_info_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchPointsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchPointsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchPointsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchPointsReply::MergeFrom(const SearchPointsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_info_array_.MergeFrom(from.point_info_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchPointsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchPointsReply::CopyFrom(const SearchPointsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchPointsReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < point_info_array_size(); i++) {
    if (!this->point_info_array(i).IsInitialized()) return false;
  }
  return true;
}

void SearchPointsReply::Swap(SearchPointsReply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    point_info_array_.Swap(&other->point_info_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchPointsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchPointsReply_descriptor_;
  metadata.reflection = SearchPointsReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Points

// @@protoc_insertion_point(global_scope)
