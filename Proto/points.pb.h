// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: points.proto

#ifndef PROTOBUF_points_2eproto__INCLUDED
#define PROTOBUF_points_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Points {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_points_2eproto();
void protobuf_AssignDesc_points_2eproto();
void protobuf_ShutdownFile_points_2eproto();

class TypeInfo;
class AddTypeQuery;
class AddTypeReply;
class DeleteTypeQuery;
class DeleteTypeReply;
class GetTypesNumQuery;
class GetTypesNumReply;
class GetTypesQuery;
class GetTypesReply;
class GetTypeByIDQuery;
class GetTypeByIDReply;
class AddTableQuery;
class AddTableReply;
class DeleteTableQuery;
class DeleteTableReply;
class GetTablesNumQuery;
class GetTablesNumReply;
class GetTablesQuery;
class GetTablesReply;
class GetTablesReply_TableInfo;
class GetTableByIDQuery;
class GetTableByIDReply;
class AddPointsQuery;
class AddPointsReply;
class DeletePointQuery;
class DeletePointReply;
class SearchPointsNumQuery;
class SearchPointsNumByIDQuery;
class SearchPointsNumReply;
class SearchPointsQuery;
class SearchPointsByIDQuery;
class SearchPointsReply;
class SearchPointsReply_PointInfo;

// ===================================================================

class TypeInfo : public ::google::protobuf::Message {
 public:
  TypeInfo();
  virtual ~TypeInfo();

  TypeInfo(const TypeInfo& from);

  inline TypeInfo& operator=(const TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeInfo& default_instance();

  void Swap(TypeInfo* other);

  // implements Message ----------------------------------------------

  TypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TypeInfo& from);
  void MergeFrom(const TypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bytes type_names = 4;
  inline bool has_type_names() const;
  inline void clear_type_names();
  static const int kTypeNamesFieldNumber = 4;
  inline const ::std::string& type_names() const;
  inline void set_type_names(const ::std::string& value);
  inline void set_type_names(const char* value);
  inline void set_type_names(const void* value, size_t size);
  inline ::std::string* mutable_type_names();
  inline ::std::string* release_type_names();
  inline void set_allocated_type_names(::std::string* type_names);

  // @@protoc_insertion_point(class_scope:Points.TypeInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type_names();
  inline void clear_has_type_names();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* name_;
  ::std::string* type_names_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static TypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class AddTypeQuery : public ::google::protobuf::Message {
 public:
  AddTypeQuery();
  virtual ~AddTypeQuery();

  AddTypeQuery(const AddTypeQuery& from);

  inline AddTypeQuery& operator=(const AddTypeQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTypeQuery& default_instance();

  void Swap(AddTypeQuery* other);

  // implements Message ----------------------------------------------

  AddTypeQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTypeQuery& from);
  void MergeFrom(const AddTypeQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes type_names = 3;
  inline bool has_type_names() const;
  inline void clear_type_names();
  static const int kTypeNamesFieldNumber = 3;
  inline const ::std::string& type_names() const;
  inline void set_type_names(const ::std::string& value);
  inline void set_type_names(const char* value);
  inline void set_type_names(const void* value, size_t size);
  inline ::std::string* mutable_type_names();
  inline ::std::string* release_type_names();
  inline void set_allocated_type_names(::std::string* type_names);

  // @@protoc_insertion_point(class_scope:Points.AddTypeQuery)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type_names();
  inline void clear_has_type_names();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* name_;
  ::std::string* type_names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddTypeQuery* default_instance_;
};
// -------------------------------------------------------------------

class AddTypeReply : public ::google::protobuf::Message {
 public:
  AddTypeReply();
  virtual ~AddTypeReply();

  AddTypeReply(const AddTypeReply& from);

  inline AddTypeReply& operator=(const AddTypeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTypeReply& default_instance();

  void Swap(AddTypeReply* other);

  // implements Message ----------------------------------------------

  AddTypeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTypeReply& from);
  void MergeFrom(const AddTypeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.AddTypeReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddTypeReply* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTypeQuery : public ::google::protobuf::Message {
 public:
  DeleteTypeQuery();
  virtual ~DeleteTypeQuery();

  DeleteTypeQuery(const DeleteTypeQuery& from);

  inline DeleteTypeQuery& operator=(const DeleteTypeQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTypeQuery& default_instance();

  void Swap(DeleteTypeQuery* other);

  // implements Message ----------------------------------------------

  DeleteTypeQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTypeQuery& from);
  void MergeFrom(const DeleteTypeQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeleteTypeQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeleteTypeQuery* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTypeReply : public ::google::protobuf::Message {
 public:
  DeleteTypeReply();
  virtual ~DeleteTypeReply();

  DeleteTypeReply(const DeleteTypeReply& from);

  inline DeleteTypeReply& operator=(const DeleteTypeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTypeReply& default_instance();

  void Swap(DeleteTypeReply* other);

  // implements Message ----------------------------------------------

  DeleteTypeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTypeReply& from);
  void MergeFrom(const DeleteTypeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeleteTypeReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeleteTypeReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTypesNumQuery : public ::google::protobuf::Message {
 public:
  GetTypesNumQuery();
  virtual ~GetTypesNumQuery();

  GetTypesNumQuery(const GetTypesNumQuery& from);

  inline GetTypesNumQuery& operator=(const GetTypesNumQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypesNumQuery& default_instance();

  void Swap(GetTypesNumQuery* other);

  // implements Message ----------------------------------------------

  GetTypesNumQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypesNumQuery& from);
  void MergeFrom(const GetTypesNumQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 unused = 1;
  inline bool has_unused() const;
  inline void clear_unused();
  static const int kUnusedFieldNumber = 1;
  inline ::google::protobuf::int32 unused() const;
  inline void set_unused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTypesNumQuery)
 private:
  inline void set_has_unused();
  inline void clear_has_unused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 unused_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypesNumQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTypesNumReply : public ::google::protobuf::Message {
 public:
  GetTypesNumReply();
  virtual ~GetTypesNumReply();

  GetTypesNumReply(const GetTypesNumReply& from);

  inline GetTypesNumReply& operator=(const GetTypesNumReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypesNumReply& default_instance();

  void Swap(GetTypesNumReply* other);

  // implements Message ----------------------------------------------

  GetTypesNumReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypesNumReply& from);
  void MergeFrom(const GetTypesNumReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTypesNumReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypesNumReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTypesQuery : public ::google::protobuf::Message {
 public:
  GetTypesQuery();
  virtual ~GetTypesQuery();

  GetTypesQuery(const GetTypesQuery& from);

  inline GetTypesQuery& operator=(const GetTypesQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypesQuery& default_instance();

  void Swap(GetTypesQuery* other);

  // implements Message ----------------------------------------------

  GetTypesQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypesQuery& from);
  void MergeFrom(const GetTypesQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTypesQuery)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypesQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTypesReply : public ::google::protobuf::Message {
 public:
  GetTypesReply();
  virtual ~GetTypesReply();

  GetTypesReply(const GetTypesReply& from);

  inline GetTypesReply& operator=(const GetTypesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypesReply& default_instance();

  void Swap(GetTypesReply* other);

  // implements Message ----------------------------------------------

  GetTypesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypesReply& from);
  void MergeFrom(const GetTypesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // repeated .Points.TypeInfo type_info_array = 2;
  inline int type_info_array_size() const;
  inline void clear_type_info_array();
  static const int kTypeInfoArrayFieldNumber = 2;
  inline const ::Points::TypeInfo& type_info_array(int index) const;
  inline ::Points::TypeInfo* mutable_type_info_array(int index);
  inline ::Points::TypeInfo* add_type_info_array();
  inline const ::google::protobuf::RepeatedPtrField< ::Points::TypeInfo >&
      type_info_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::Points::TypeInfo >*
      mutable_type_info_array();

  // @@protoc_insertion_point(class_scope:Points.GetTypesReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Points::TypeInfo > type_info_array_;
  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypesReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTypeByIDQuery : public ::google::protobuf::Message {
 public:
  GetTypeByIDQuery();
  virtual ~GetTypeByIDQuery();

  GetTypeByIDQuery(const GetTypeByIDQuery& from);

  inline GetTypeByIDQuery& operator=(const GetTypeByIDQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypeByIDQuery& default_instance();

  void Swap(GetTypeByIDQuery* other);

  // implements Message ----------------------------------------------

  GetTypeByIDQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypeByIDQuery& from);
  void MergeFrom(const GetTypeByIDQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTypeByIDQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypeByIDQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTypeByIDReply : public ::google::protobuf::Message {
 public:
  GetTypeByIDReply();
  virtual ~GetTypeByIDReply();

  GetTypeByIDReply(const GetTypeByIDReply& from);

  inline GetTypeByIDReply& operator=(const GetTypeByIDReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTypeByIDReply& default_instance();

  void Swap(GetTypeByIDReply* other);

  // implements Message ----------------------------------------------

  GetTypeByIDReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTypeByIDReply& from);
  void MergeFrom(const GetTypeByIDReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional .Points.TypeInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::Points::TypeInfo& info() const;
  inline ::Points::TypeInfo* mutable_info();
  inline ::Points::TypeInfo* release_info();
  inline void set_allocated_info(::Points::TypeInfo* info);

  // @@protoc_insertion_point(class_scope:Points.GetTypeByIDReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Points::TypeInfo* info_;
  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTypeByIDReply* default_instance_;
};
// -------------------------------------------------------------------

class AddTableQuery : public ::google::protobuf::Message {
 public:
  AddTableQuery();
  virtual ~AddTableQuery();

  AddTableQuery(const AddTableQuery& from);

  inline AddTableQuery& operator=(const AddTableQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTableQuery& default_instance();

  void Swap(AddTableQuery* other);

  // implements Message ----------------------------------------------

  AddTableQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTableQuery& from);
  void MergeFrom(const AddTableQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Points.AddTableQuery)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddTableQuery* default_instance_;
};
// -------------------------------------------------------------------

class AddTableReply : public ::google::protobuf::Message {
 public:
  AddTableReply();
  virtual ~AddTableReply();

  AddTableReply(const AddTableReply& from);

  inline AddTableReply& operator=(const AddTableReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTableReply& default_instance();

  void Swap(AddTableReply* other);

  // implements Message ----------------------------------------------

  AddTableReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTableReply& from);
  void MergeFrom(const AddTableReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.AddTableReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddTableReply* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTableQuery : public ::google::protobuf::Message {
 public:
  DeleteTableQuery();
  virtual ~DeleteTableQuery();

  DeleteTableQuery(const DeleteTableQuery& from);

  inline DeleteTableQuery& operator=(const DeleteTableQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTableQuery& default_instance();

  void Swap(DeleteTableQuery* other);

  // implements Message ----------------------------------------------

  DeleteTableQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTableQuery& from);
  void MergeFrom(const DeleteTableQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeleteTableQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeleteTableQuery* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTableReply : public ::google::protobuf::Message {
 public:
  DeleteTableReply();
  virtual ~DeleteTableReply();

  DeleteTableReply(const DeleteTableReply& from);

  inline DeleteTableReply& operator=(const DeleteTableReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTableReply& default_instance();

  void Swap(DeleteTableReply* other);

  // implements Message ----------------------------------------------

  DeleteTableReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTableReply& from);
  void MergeFrom(const DeleteTableReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeleteTableReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeleteTableReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTablesNumQuery : public ::google::protobuf::Message {
 public:
  GetTablesNumQuery();
  virtual ~GetTablesNumQuery();

  GetTablesNumQuery(const GetTablesNumQuery& from);

  inline GetTablesNumQuery& operator=(const GetTablesNumQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesNumQuery& default_instance();

  void Swap(GetTablesNumQuery* other);

  // implements Message ----------------------------------------------

  GetTablesNumQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTablesNumQuery& from);
  void MergeFrom(const GetTablesNumQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 unused = 1;
  inline bool has_unused() const;
  inline void clear_unused();
  static const int kUnusedFieldNumber = 1;
  inline ::google::protobuf::int32 unused() const;
  inline void set_unused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTablesNumQuery)
 private:
  inline void set_has_unused();
  inline void clear_has_unused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 unused_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTablesNumQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTablesNumReply : public ::google::protobuf::Message {
 public:
  GetTablesNumReply();
  virtual ~GetTablesNumReply();

  GetTablesNumReply(const GetTablesNumReply& from);

  inline GetTablesNumReply& operator=(const GetTablesNumReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesNumReply& default_instance();

  void Swap(GetTablesNumReply* other);

  // implements Message ----------------------------------------------

  GetTablesNumReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTablesNumReply& from);
  void MergeFrom(const GetTablesNumReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTablesNumReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTablesNumReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTablesQuery : public ::google::protobuf::Message {
 public:
  GetTablesQuery();
  virtual ~GetTablesQuery();

  GetTablesQuery(const GetTablesQuery& from);

  inline GetTablesQuery& operator=(const GetTablesQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesQuery& default_instance();

  void Swap(GetTablesQuery* other);

  // implements Message ----------------------------------------------

  GetTablesQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTablesQuery& from);
  void MergeFrom(const GetTablesQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTablesQuery)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTablesQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTablesReply_TableInfo : public ::google::protobuf::Message {
 public:
  GetTablesReply_TableInfo();
  virtual ~GetTablesReply_TableInfo();

  GetTablesReply_TableInfo(const GetTablesReply_TableInfo& from);

  inline GetTablesReply_TableInfo& operator=(const GetTablesReply_TableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesReply_TableInfo& default_instance();

  void Swap(GetTablesReply_TableInfo* other);

  // implements Message ----------------------------------------------

  GetTablesReply_TableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTablesReply_TableInfo& from);
  void MergeFrom(const GetTablesReply_TableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTablesReply.TableInfo)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTablesReply_TableInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetTablesReply : public ::google::protobuf::Message {
 public:
  GetTablesReply();
  virtual ~GetTablesReply();

  GetTablesReply(const GetTablesReply& from);

  inline GetTablesReply& operator=(const GetTablesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesReply& default_instance();

  void Swap(GetTablesReply* other);

  // implements Message ----------------------------------------------

  GetTablesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTablesReply& from);
  void MergeFrom(const GetTablesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetTablesReply_TableInfo TableInfo;

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
  inline int table_info_array_size() const;
  inline void clear_table_info_array();
  static const int kTableInfoArrayFieldNumber = 2;
  inline const ::Points::GetTablesReply_TableInfo& table_info_array(int index) const;
  inline ::Points::GetTablesReply_TableInfo* mutable_table_info_array(int index);
  inline ::Points::GetTablesReply_TableInfo* add_table_info_array();
  inline const ::google::protobuf::RepeatedPtrField< ::Points::GetTablesReply_TableInfo >&
      table_info_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::Points::GetTablesReply_TableInfo >*
      mutable_table_info_array();

  // @@protoc_insertion_point(class_scope:Points.GetTablesReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Points::GetTablesReply_TableInfo > table_info_array_;
  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTablesReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTableByIDQuery : public ::google::protobuf::Message {
 public:
  GetTableByIDQuery();
  virtual ~GetTableByIDQuery();

  GetTableByIDQuery(const GetTableByIDQuery& from);

  inline GetTableByIDQuery& operator=(const GetTableByIDQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTableByIDQuery& default_instance();

  void Swap(GetTableByIDQuery* other);

  // implements Message ----------------------------------------------

  GetTableByIDQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTableByIDQuery& from);
  void MergeFrom(const GetTableByIDQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTableByIDQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTableByIDQuery* default_instance_;
};
// -------------------------------------------------------------------

class GetTableByIDReply : public ::google::protobuf::Message {
 public:
  GetTableByIDReply();
  virtual ~GetTableByIDReply();

  GetTableByIDReply(const GetTableByIDReply& from);

  inline GetTableByIDReply& operator=(const GetTableByIDReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTableByIDReply& default_instance();

  void Swap(GetTableByIDReply* other);

  // implements Message ----------------------------------------------

  GetTableByIDReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTableByIDReply& from);
  void MergeFrom(const GetTableByIDReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.GetTableByIDReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 type_id_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static GetTableByIDReply* default_instance_;
};
// -------------------------------------------------------------------

class AddPointsQuery : public ::google::protobuf::Message {
 public:
  AddPointsQuery();
  virtual ~AddPointsQuery();

  AddPointsQuery(const AddPointsQuery& from);

  inline AddPointsQuery& operator=(const AddPointsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPointsQuery& default_instance();

  void Swap(AddPointsQuery* other);

  // implements Message ----------------------------------------------

  AddPointsQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPointsQuery& from);
  void MergeFrom(const AddPointsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // repeated bytes point_names = 2;
  inline int point_names_size() const;
  inline void clear_point_names();
  static const int kPointNamesFieldNumber = 2;
  inline const ::std::string& point_names(int index) const;
  inline ::std::string* mutable_point_names(int index);
  inline void set_point_names(int index, const ::std::string& value);
  inline void set_point_names(int index, const char* value);
  inline void set_point_names(int index, const void* value, size_t size);
  inline ::std::string* add_point_names();
  inline void add_point_names(const ::std::string& value);
  inline void add_point_names(const char* value);
  inline void add_point_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& point_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_point_names();

  // @@protoc_insertion_point(class_scope:Points.AddPointsQuery)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> point_names_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddPointsQuery* default_instance_;
};
// -------------------------------------------------------------------

class AddPointsReply : public ::google::protobuf::Message {
 public:
  AddPointsReply();
  virtual ~AddPointsReply();

  AddPointsReply(const AddPointsReply& from);

  inline AddPointsReply& operator=(const AddPointsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPointsReply& default_instance();

  void Swap(AddPointsReply* other);

  // implements Message ----------------------------------------------

  AddPointsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPointsReply& from);
  void MergeFrom(const AddPointsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 suc_num = 2;
  inline bool has_suc_num() const;
  inline void clear_suc_num();
  static const int kSucNumFieldNumber = 2;
  inline ::google::protobuf::int32 suc_num() const;
  inline void set_suc_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.AddPointsReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_suc_num();
  inline void clear_has_suc_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 suc_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static AddPointsReply* default_instance_;
};
// -------------------------------------------------------------------

class DeletePointQuery : public ::google::protobuf::Message {
 public:
  DeletePointQuery();
  virtual ~DeletePointQuery();

  DeletePointQuery(const DeletePointQuery& from);

  inline DeletePointQuery& operator=(const DeletePointQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePointQuery& default_instance();

  void Swap(DeletePointQuery* other);

  // implements Message ----------------------------------------------

  DeletePointQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeletePointQuery& from);
  void MergeFrom(const DeletePointQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeletePointQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeletePointQuery* default_instance_;
};
// -------------------------------------------------------------------

class DeletePointReply : public ::google::protobuf::Message {
 public:
  DeletePointReply();
  virtual ~DeletePointReply();

  DeletePointReply(const DeletePointReply& from);

  inline DeletePointReply& operator=(const DeletePointReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePointReply& default_instance();

  void Swap(DeletePointReply* other);

  // implements Message ----------------------------------------------

  DeletePointReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeletePointReply& from);
  void MergeFrom(const DeletePointReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.DeletePointReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static DeletePointReply* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsNumQuery : public ::google::protobuf::Message {
 public:
  SearchPointsNumQuery();
  virtual ~SearchPointsNumQuery();

  SearchPointsNumQuery(const SearchPointsNumQuery& from);

  inline SearchPointsNumQuery& operator=(const SearchPointsNumQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsNumQuery& default_instance();

  void Swap(SearchPointsNumQuery* other);

  // implements Message ----------------------------------------------

  SearchPointsNumQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsNumQuery& from);
  void MergeFrom(const SearchPointsNumQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required bytes point_name = 2;
  inline bool has_point_name() const;
  inline void clear_point_name();
  static const int kPointNameFieldNumber = 2;
  inline const ::std::string& point_name() const;
  inline void set_point_name(const ::std::string& value);
  inline void set_point_name(const char* value);
  inline void set_point_name(const void* value, size_t size);
  inline ::std::string* mutable_point_name();
  inline ::std::string* release_point_name();
  inline void set_allocated_point_name(::std::string* point_name);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsNumQuery)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_point_name();
  inline void clear_has_point_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* point_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsNumQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsNumByIDQuery : public ::google::protobuf::Message {
 public:
  SearchPointsNumByIDQuery();
  virtual ~SearchPointsNumByIDQuery();

  SearchPointsNumByIDQuery(const SearchPointsNumByIDQuery& from);

  inline SearchPointsNumByIDQuery& operator=(const SearchPointsNumByIDQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsNumByIDQuery& default_instance();

  void Swap(SearchPointsNumByIDQuery* other);

  // implements Message ----------------------------------------------

  SearchPointsNumByIDQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsNumByIDQuery& from);
  void MergeFrom(const SearchPointsNumByIDQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required bytes point_name = 2;
  inline bool has_point_name() const;
  inline void clear_point_name();
  static const int kPointNameFieldNumber = 2;
  inline const ::std::string& point_name() const;
  inline void set_point_name(const ::std::string& value);
  inline void set_point_name(const char* value);
  inline void set_point_name(const void* value, size_t size);
  inline ::std::string* mutable_point_name();
  inline ::std::string* release_point_name();
  inline void set_allocated_point_name(::std::string* point_name);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsNumByIDQuery)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_point_name();
  inline void clear_has_point_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* point_name_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsNumByIDQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsNumReply : public ::google::protobuf::Message {
 public:
  SearchPointsNumReply();
  virtual ~SearchPointsNumReply();

  SearchPointsNumReply(const SearchPointsNumReply& from);

  inline SearchPointsNumReply& operator=(const SearchPointsNumReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsNumReply& default_instance();

  void Swap(SearchPointsNumReply* other);

  // implements Message ----------------------------------------------

  SearchPointsNumReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsNumReply& from);
  void MergeFrom(const SearchPointsNumReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsNumReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsNumReply* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsQuery : public ::google::protobuf::Message {
 public:
  SearchPointsQuery();
  virtual ~SearchPointsQuery();

  SearchPointsQuery(const SearchPointsQuery& from);

  inline SearchPointsQuery& operator=(const SearchPointsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsQuery& default_instance();

  void Swap(SearchPointsQuery* other);

  // implements Message ----------------------------------------------

  SearchPointsQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsQuery& from);
  void MergeFrom(const SearchPointsQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required bytes point_name = 2;
  inline bool has_point_name() const;
  inline void clear_point_name();
  static const int kPointNameFieldNumber = 2;
  inline const ::std::string& point_name() const;
  inline void set_point_name(const ::std::string& value);
  inline void set_point_name(const char* value);
  inline void set_point_name(const void* value, size_t size);
  inline ::std::string* mutable_point_name();
  inline ::std::string* release_point_name();
  inline void set_allocated_point_name(::std::string* point_name);

  // required int32 from_id = 3;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 3;
  inline ::google::protobuf::int32 from_id() const;
  inline void set_from_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsQuery)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_point_name();
  inline void clear_has_point_name();
  inline void set_has_from_id();
  inline void clear_has_from_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* point_name_;
  ::google::protobuf::int32 from_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsByIDQuery : public ::google::protobuf::Message {
 public:
  SearchPointsByIDQuery();
  virtual ~SearchPointsByIDQuery();

  SearchPointsByIDQuery(const SearchPointsByIDQuery& from);

  inline SearchPointsByIDQuery& operator=(const SearchPointsByIDQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsByIDQuery& default_instance();

  void Swap(SearchPointsByIDQuery* other);

  // implements Message ----------------------------------------------

  SearchPointsByIDQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsByIDQuery& from);
  void MergeFrom(const SearchPointsByIDQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required bytes point_name = 2;
  inline bool has_point_name() const;
  inline void clear_point_name();
  static const int kPointNameFieldNumber = 2;
  inline const ::std::string& point_name() const;
  inline void set_point_name(const ::std::string& value);
  inline void set_point_name(const char* value);
  inline void set_point_name(const void* value, size_t size);
  inline ::std::string* mutable_point_name();
  inline ::std::string* release_point_name();
  inline void set_allocated_point_name(::std::string* point_name);

  // required int32 from_id = 3;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 3;
  inline ::google::protobuf::int32 from_id() const;
  inline void set_from_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsByIDQuery)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_point_name();
  inline void clear_has_point_name();
  inline void set_has_from_id();
  inline void clear_has_from_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* point_name_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 from_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsByIDQuery* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsReply_PointInfo : public ::google::protobuf::Message {
 public:
  SearchPointsReply_PointInfo();
  virtual ~SearchPointsReply_PointInfo();

  SearchPointsReply_PointInfo(const SearchPointsReply_PointInfo& from);

  inline SearchPointsReply_PointInfo& operator=(const SearchPointsReply_PointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsReply_PointInfo& default_instance();

  void Swap(SearchPointsReply_PointInfo* other);

  // implements Message ----------------------------------------------

  SearchPointsReply_PointInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsReply_PointInfo& from);
  void MergeFrom(const SearchPointsReply_PointInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Points.SearchPointsReply.PointInfo)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsReply_PointInfo* default_instance_;
};
// -------------------------------------------------------------------

class SearchPointsReply : public ::google::protobuf::Message {
 public:
  SearchPointsReply();
  virtual ~SearchPointsReply();

  SearchPointsReply(const SearchPointsReply& from);

  inline SearchPointsReply& operator=(const SearchPointsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPointsReply& default_instance();

  void Swap(SearchPointsReply* other);

  // implements Message ----------------------------------------------

  SearchPointsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPointsReply& from);
  void MergeFrom(const SearchPointsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SearchPointsReply_PointInfo PointInfo;

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
  inline int point_info_array_size() const;
  inline void clear_point_info_array();
  static const int kPointInfoArrayFieldNumber = 2;
  inline const ::Points::SearchPointsReply_PointInfo& point_info_array(int index) const;
  inline ::Points::SearchPointsReply_PointInfo* mutable_point_info_array(int index);
  inline ::Points::SearchPointsReply_PointInfo* add_point_info_array();
  inline const ::google::protobuf::RepeatedPtrField< ::Points::SearchPointsReply_PointInfo >&
      point_info_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::Points::SearchPointsReply_PointInfo >*
      mutable_point_info_array();

  // @@protoc_insertion_point(class_scope:Points.SearchPointsReply)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Points::SearchPointsReply_PointInfo > point_info_array_;
  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_points_2eproto();
  friend void protobuf_AssignDesc_points_2eproto();
  friend void protobuf_ShutdownFile_points_2eproto();

  void InitAsDefaultInstance();
  static SearchPointsReply* default_instance_;
};
// ===================================================================


// ===================================================================

// TypeInfo

// required bytes type = 1;
inline bool TypeInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& TypeInfo::type() const {
  return *type_;
}
inline void TypeInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void TypeInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void TypeInfo::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TypeInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* TypeInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TypeInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 2;
inline bool TypeInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TypeInfo::name() const {
  return *name_;
}
inline void TypeInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TypeInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TypeInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TypeInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TypeInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TypeInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 3;
inline bool TypeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TypeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TypeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TypeInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TypeInfo::id() const {
  return id_;
}
inline void TypeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bytes type_names = 4;
inline bool TypeInfo::has_type_names() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TypeInfo::set_has_type_names() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TypeInfo::clear_has_type_names() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TypeInfo::clear_type_names() {
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    type_names_->clear();
  }
  clear_has_type_names();
}
inline const ::std::string& TypeInfo::type_names() const {
  return *type_names_;
}
inline void TypeInfo::set_type_names(const ::std::string& value) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(value);
}
inline void TypeInfo::set_type_names(const char* value) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(value);
}
inline void TypeInfo::set_type_names(const void* value, size_t size) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TypeInfo::mutable_type_names() {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  return type_names_;
}
inline ::std::string* TypeInfo::release_type_names() {
  clear_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_names_;
    type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TypeInfo::set_allocated_type_names(::std::string* type_names) {
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    delete type_names_;
  }
  if (type_names) {
    set_has_type_names();
    type_names_ = type_names;
  } else {
    clear_has_type_names();
    type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddTypeQuery

// required bytes type = 1;
inline bool AddTypeQuery::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTypeQuery::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTypeQuery::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTypeQuery::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& AddTypeQuery::type() const {
  return *type_;
}
inline void AddTypeQuery::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void AddTypeQuery::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void AddTypeQuery::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddTypeQuery::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* AddTypeQuery::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddTypeQuery::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 2;
inline bool AddTypeQuery::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTypeQuery::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTypeQuery::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTypeQuery::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AddTypeQuery::name() const {
  return *name_;
}
inline void AddTypeQuery::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddTypeQuery::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddTypeQuery::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddTypeQuery::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AddTypeQuery::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddTypeQuery::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes type_names = 3;
inline bool AddTypeQuery::has_type_names() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddTypeQuery::set_has_type_names() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddTypeQuery::clear_has_type_names() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddTypeQuery::clear_type_names() {
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    type_names_->clear();
  }
  clear_has_type_names();
}
inline const ::std::string& AddTypeQuery::type_names() const {
  return *type_names_;
}
inline void AddTypeQuery::set_type_names(const ::std::string& value) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(value);
}
inline void AddTypeQuery::set_type_names(const char* value) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(value);
}
inline void AddTypeQuery::set_type_names(const void* value, size_t size) {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  type_names_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddTypeQuery::mutable_type_names() {
  set_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    type_names_ = new ::std::string;
  }
  return type_names_;
}
inline ::std::string* AddTypeQuery::release_type_names() {
  clear_has_type_names();
  if (type_names_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_names_;
    type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddTypeQuery::set_allocated_type_names(::std::string* type_names) {
  if (type_names_ != &::google::protobuf::internal::kEmptyString) {
    delete type_names_;
  }
  if (type_names) {
    set_has_type_names();
    type_names_ = type_names;
  } else {
    clear_has_type_names();
    type_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddTypeReply

// required int32 err = 1;
inline bool AddTypeReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTypeReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTypeReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTypeReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 AddTypeReply::err() const {
  return err_;
}
inline void AddTypeReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// DeleteTypeQuery

// required int32 id = 1;
inline bool DeleteTypeQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTypeQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTypeQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTypeQuery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeleteTypeQuery::id() const {
  return id_;
}
inline void DeleteTypeQuery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DeleteTypeReply

// required int32 err = 1;
inline bool DeleteTypeReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTypeReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTypeReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTypeReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteTypeReply::err() const {
  return err_;
}
inline void DeleteTypeReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// GetTypesNumQuery

// required int32 unused = 1;
inline bool GetTypesNumQuery::has_unused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypesNumQuery::set_has_unused() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypesNumQuery::clear_has_unused() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypesNumQuery::clear_unused() {
  unused_ = 0;
  clear_has_unused();
}
inline ::google::protobuf::int32 GetTypesNumQuery::unused() const {
  return unused_;
}
inline void GetTypesNumQuery::set_unused(::google::protobuf::int32 value) {
  set_has_unused();
  unused_ = value;
}

// -------------------------------------------------------------------

// GetTypesNumReply

// required int32 err = 1;
inline bool GetTypesNumReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypesNumReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypesNumReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypesNumReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTypesNumReply::err() const {
  return err_;
}
inline void GetTypesNumReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 num = 2;
inline bool GetTypesNumReply::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTypesNumReply::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTypesNumReply::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTypesNumReply::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GetTypesNumReply::num() const {
  return num_;
}
inline void GetTypesNumReply::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GetTypesQuery

// required int32 num = 1;
inline bool GetTypesQuery::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypesQuery::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypesQuery::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypesQuery::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GetTypesQuery::num() const {
  return num_;
}
inline void GetTypesQuery::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GetTypesReply

// required int32 err = 1;
inline bool GetTypesReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypesReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypesReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypesReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTypesReply::err() const {
  return err_;
}
inline void GetTypesReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// repeated .Points.TypeInfo type_info_array = 2;
inline int GetTypesReply::type_info_array_size() const {
  return type_info_array_.size();
}
inline void GetTypesReply::clear_type_info_array() {
  type_info_array_.Clear();
}
inline const ::Points::TypeInfo& GetTypesReply::type_info_array(int index) const {
  return type_info_array_.Get(index);
}
inline ::Points::TypeInfo* GetTypesReply::mutable_type_info_array(int index) {
  return type_info_array_.Mutable(index);
}
inline ::Points::TypeInfo* GetTypesReply::add_type_info_array() {
  return type_info_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Points::TypeInfo >&
GetTypesReply::type_info_array() const {
  return type_info_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::Points::TypeInfo >*
GetTypesReply::mutable_type_info_array() {
  return &type_info_array_;
}

// -------------------------------------------------------------------

// GetTypeByIDQuery

// required int32 id = 1;
inline bool GetTypeByIDQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypeByIDQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypeByIDQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypeByIDQuery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GetTypeByIDQuery::id() const {
  return id_;
}
inline void GetTypeByIDQuery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetTypeByIDReply

// required int32 err = 1;
inline bool GetTypeByIDReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTypeByIDReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTypeByIDReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTypeByIDReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTypeByIDReply::err() const {
  return err_;
}
inline void GetTypeByIDReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional .Points.TypeInfo info = 2;
inline bool GetTypeByIDReply::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTypeByIDReply::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTypeByIDReply::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTypeByIDReply::clear_info() {
  if (info_ != NULL) info_->::Points::TypeInfo::Clear();
  clear_has_info();
}
inline const ::Points::TypeInfo& GetTypeByIDReply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Points::TypeInfo* GetTypeByIDReply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Points::TypeInfo;
  return info_;
}
inline ::Points::TypeInfo* GetTypeByIDReply::release_info() {
  clear_has_info();
  ::Points::TypeInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetTypeByIDReply::set_allocated_info(::Points::TypeInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AddTableQuery

// required int32 type_id = 1;
inline bool AddTableQuery::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTableQuery::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTableQuery::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTableQuery::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 AddTableQuery::type_id() const {
  return type_id_;
}
inline void AddTableQuery::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// required bytes name = 2;
inline bool AddTableQuery::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTableQuery::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTableQuery::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTableQuery::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AddTableQuery::name() const {
  return *name_;
}
inline void AddTableQuery::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddTableQuery::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddTableQuery::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddTableQuery::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AddTableQuery::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddTableQuery::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddTableReply

// required int32 err = 1;
inline bool AddTableReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTableReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTableReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTableReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 AddTableReply::err() const {
  return err_;
}
inline void AddTableReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// DeleteTableQuery

// required int32 id = 1;
inline bool DeleteTableQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTableQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTableQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTableQuery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeleteTableQuery::id() const {
  return id_;
}
inline void DeleteTableQuery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DeleteTableReply

// required int32 err = 1;
inline bool DeleteTableReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTableReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTableReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTableReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeleteTableReply::err() const {
  return err_;
}
inline void DeleteTableReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// GetTablesNumQuery

// required int32 unused = 1;
inline bool GetTablesNumQuery::has_unused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesNumQuery::set_has_unused() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesNumQuery::clear_has_unused() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesNumQuery::clear_unused() {
  unused_ = 0;
  clear_has_unused();
}
inline ::google::protobuf::int32 GetTablesNumQuery::unused() const {
  return unused_;
}
inline void GetTablesNumQuery::set_unused(::google::protobuf::int32 value) {
  set_has_unused();
  unused_ = value;
}

// -------------------------------------------------------------------

// GetTablesNumReply

// required int32 err = 1;
inline bool GetTablesNumReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesNumReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesNumReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesNumReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTablesNumReply::err() const {
  return err_;
}
inline void GetTablesNumReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 num = 2;
inline bool GetTablesNumReply::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablesNumReply::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablesNumReply::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablesNumReply::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GetTablesNumReply::num() const {
  return num_;
}
inline void GetTablesNumReply::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GetTablesQuery

// required int32 num = 1;
inline bool GetTablesQuery::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesQuery::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesQuery::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesQuery::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GetTablesQuery::num() const {
  return num_;
}
inline void GetTablesQuery::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GetTablesReply_TableInfo

// required int32 type_id = 1;
inline bool GetTablesReply_TableInfo::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesReply_TableInfo::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesReply_TableInfo::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesReply_TableInfo::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GetTablesReply_TableInfo::type_id() const {
  return type_id_;
}
inline void GetTablesReply_TableInfo::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// required bytes name = 2;
inline bool GetTablesReply_TableInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablesReply_TableInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablesReply_TableInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablesReply_TableInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetTablesReply_TableInfo::name() const {
  return *name_;
}
inline void GetTablesReply_TableInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetTablesReply_TableInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetTablesReply_TableInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTablesReply_TableInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GetTablesReply_TableInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTablesReply_TableInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 3;
inline bool GetTablesReply_TableInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTablesReply_TableInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTablesReply_TableInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTablesReply_TableInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GetTablesReply_TableInfo::id() const {
  return id_;
}
inline void GetTablesReply_TableInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetTablesReply

// required int32 err = 1;
inline bool GetTablesReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTablesReply::err() const {
  return err_;
}
inline void GetTablesReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// repeated .Points.GetTablesReply.TableInfo table_info_array = 2;
inline int GetTablesReply::table_info_array_size() const {
  return table_info_array_.size();
}
inline void GetTablesReply::clear_table_info_array() {
  table_info_array_.Clear();
}
inline const ::Points::GetTablesReply_TableInfo& GetTablesReply::table_info_array(int index) const {
  return table_info_array_.Get(index);
}
inline ::Points::GetTablesReply_TableInfo* GetTablesReply::mutable_table_info_array(int index) {
  return table_info_array_.Mutable(index);
}
inline ::Points::GetTablesReply_TableInfo* GetTablesReply::add_table_info_array() {
  return table_info_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Points::GetTablesReply_TableInfo >&
GetTablesReply::table_info_array() const {
  return table_info_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::Points::GetTablesReply_TableInfo >*
GetTablesReply::mutable_table_info_array() {
  return &table_info_array_;
}

// -------------------------------------------------------------------

// GetTableByIDQuery

// required int32 id = 1;
inline bool GetTableByIDQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTableByIDQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTableByIDQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTableByIDQuery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GetTableByIDQuery::id() const {
  return id_;
}
inline void GetTableByIDQuery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetTableByIDReply

// required int32 err = 1;
inline bool GetTableByIDReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTableByIDReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTableByIDReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTableByIDReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 GetTableByIDReply::err() const {
  return err_;
}
inline void GetTableByIDReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 type_id = 2;
inline bool GetTableByIDReply::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTableByIDReply::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTableByIDReply::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTableByIDReply::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GetTableByIDReply::type_id() const {
  return type_id_;
}
inline void GetTableByIDReply::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes name = 3;
inline bool GetTableByIDReply::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTableByIDReply::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTableByIDReply::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTableByIDReply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetTableByIDReply::name() const {
  return *name_;
}
inline void GetTableByIDReply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetTableByIDReply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetTableByIDReply::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTableByIDReply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GetTableByIDReply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTableByIDReply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 4;
inline bool GetTableByIDReply::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTableByIDReply::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTableByIDReply::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTableByIDReply::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GetTableByIDReply::id() const {
  return id_;
}
inline void GetTableByIDReply::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AddPointsQuery

// required int32 table_id = 1;
inline bool AddPointsQuery::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPointsQuery::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPointsQuery::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPointsQuery::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 AddPointsQuery::table_id() const {
  return table_id_;
}
inline void AddPointsQuery::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// repeated bytes point_names = 2;
inline int AddPointsQuery::point_names_size() const {
  return point_names_.size();
}
inline void AddPointsQuery::clear_point_names() {
  point_names_.Clear();
}
inline const ::std::string& AddPointsQuery::point_names(int index) const {
  return point_names_.Get(index);
}
inline ::std::string* AddPointsQuery::mutable_point_names(int index) {
  return point_names_.Mutable(index);
}
inline void AddPointsQuery::set_point_names(int index, const ::std::string& value) {
  point_names_.Mutable(index)->assign(value);
}
inline void AddPointsQuery::set_point_names(int index, const char* value) {
  point_names_.Mutable(index)->assign(value);
}
inline void AddPointsQuery::set_point_names(int index, const void* value, size_t size) {
  point_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPointsQuery::add_point_names() {
  return point_names_.Add();
}
inline void AddPointsQuery::add_point_names(const ::std::string& value) {
  point_names_.Add()->assign(value);
}
inline void AddPointsQuery::add_point_names(const char* value) {
  point_names_.Add()->assign(value);
}
inline void AddPointsQuery::add_point_names(const void* value, size_t size) {
  point_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPointsQuery::point_names() const {
  return point_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPointsQuery::mutable_point_names() {
  return &point_names_;
}

// -------------------------------------------------------------------

// AddPointsReply

// required int32 err = 1;
inline bool AddPointsReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPointsReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPointsReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPointsReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 AddPointsReply::err() const {
  return err_;
}
inline void AddPointsReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 suc_num = 2;
inline bool AddPointsReply::has_suc_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddPointsReply::set_has_suc_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddPointsReply::clear_has_suc_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddPointsReply::clear_suc_num() {
  suc_num_ = 0;
  clear_has_suc_num();
}
inline ::google::protobuf::int32 AddPointsReply::suc_num() const {
  return suc_num_;
}
inline void AddPointsReply::set_suc_num(::google::protobuf::int32 value) {
  set_has_suc_num();
  suc_num_ = value;
}

// -------------------------------------------------------------------

// DeletePointQuery

// required int32 id = 1;
inline bool DeletePointQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePointQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeletePointQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeletePointQuery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeletePointQuery::id() const {
  return id_;
}
inline void DeletePointQuery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DeletePointReply

// required int32 err = 1;
inline bool DeletePointReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePointReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeletePointReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeletePointReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DeletePointReply::err() const {
  return err_;
}
inline void DeletePointReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// SearchPointsNumQuery

// required bytes table_name = 1;
inline bool SearchPointsNumQuery::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsNumQuery::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsNumQuery::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsNumQuery::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& SearchPointsNumQuery::table_name() const {
  return *table_name_;
}
inline void SearchPointsNumQuery::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SearchPointsNumQuery::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SearchPointsNumQuery::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsNumQuery::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* SearchPointsNumQuery::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsNumQuery::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes point_name = 2;
inline bool SearchPointsNumQuery::has_point_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsNumQuery::set_has_point_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsNumQuery::clear_has_point_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsNumQuery::clear_point_name() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    point_name_->clear();
  }
  clear_has_point_name();
}
inline const ::std::string& SearchPointsNumQuery::point_name() const {
  return *point_name_;
}
inline void SearchPointsNumQuery::set_point_name(const ::std::string& value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsNumQuery::set_point_name(const char* value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsNumQuery::set_point_name(const void* value, size_t size) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsNumQuery::mutable_point_name() {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  return point_name_;
}
inline ::std::string* SearchPointsNumQuery::release_point_name() {
  clear_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = point_name_;
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsNumQuery::set_allocated_point_name(::std::string* point_name) {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (point_name) {
    set_has_point_name();
    point_name_ = point_name;
  } else {
    clear_has_point_name();
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SearchPointsNumByIDQuery

// required int32 table_id = 1;
inline bool SearchPointsNumByIDQuery::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsNumByIDQuery::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsNumByIDQuery::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsNumByIDQuery::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 SearchPointsNumByIDQuery::table_id() const {
  return table_id_;
}
inline void SearchPointsNumByIDQuery::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required bytes point_name = 2;
inline bool SearchPointsNumByIDQuery::has_point_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsNumByIDQuery::set_has_point_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsNumByIDQuery::clear_has_point_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsNumByIDQuery::clear_point_name() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    point_name_->clear();
  }
  clear_has_point_name();
}
inline const ::std::string& SearchPointsNumByIDQuery::point_name() const {
  return *point_name_;
}
inline void SearchPointsNumByIDQuery::set_point_name(const ::std::string& value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsNumByIDQuery::set_point_name(const char* value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsNumByIDQuery::set_point_name(const void* value, size_t size) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsNumByIDQuery::mutable_point_name() {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  return point_name_;
}
inline ::std::string* SearchPointsNumByIDQuery::release_point_name() {
  clear_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = point_name_;
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsNumByIDQuery::set_allocated_point_name(::std::string* point_name) {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (point_name) {
    set_has_point_name();
    point_name_ = point_name;
  } else {
    clear_has_point_name();
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SearchPointsNumReply

// required int32 err = 1;
inline bool SearchPointsNumReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsNumReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsNumReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsNumReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 SearchPointsNumReply::err() const {
  return err_;
}
inline void SearchPointsNumReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 num = 2;
inline bool SearchPointsNumReply::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsNumReply::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsNumReply::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsNumReply::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SearchPointsNumReply::num() const {
  return num_;
}
inline void SearchPointsNumReply::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// SearchPointsQuery

// required bytes table_name = 1;
inline bool SearchPointsQuery::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsQuery::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsQuery::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsQuery::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& SearchPointsQuery::table_name() const {
  return *table_name_;
}
inline void SearchPointsQuery::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SearchPointsQuery::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SearchPointsQuery::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsQuery::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* SearchPointsQuery::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsQuery::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes point_name = 2;
inline bool SearchPointsQuery::has_point_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsQuery::set_has_point_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsQuery::clear_has_point_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsQuery::clear_point_name() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    point_name_->clear();
  }
  clear_has_point_name();
}
inline const ::std::string& SearchPointsQuery::point_name() const {
  return *point_name_;
}
inline void SearchPointsQuery::set_point_name(const ::std::string& value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsQuery::set_point_name(const char* value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsQuery::set_point_name(const void* value, size_t size) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsQuery::mutable_point_name() {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  return point_name_;
}
inline ::std::string* SearchPointsQuery::release_point_name() {
  clear_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = point_name_;
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsQuery::set_allocated_point_name(::std::string* point_name) {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (point_name) {
    set_has_point_name();
    point_name_ = point_name;
  } else {
    clear_has_point_name();
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 from_id = 3;
inline bool SearchPointsQuery::has_from_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchPointsQuery::set_has_from_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchPointsQuery::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchPointsQuery::clear_from_id() {
  from_id_ = 0;
  clear_has_from_id();
}
inline ::google::protobuf::int32 SearchPointsQuery::from_id() const {
  return from_id_;
}
inline void SearchPointsQuery::set_from_id(::google::protobuf::int32 value) {
  set_has_from_id();
  from_id_ = value;
}

// -------------------------------------------------------------------

// SearchPointsByIDQuery

// required int32 table_id = 1;
inline bool SearchPointsByIDQuery::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsByIDQuery::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsByIDQuery::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsByIDQuery::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 SearchPointsByIDQuery::table_id() const {
  return table_id_;
}
inline void SearchPointsByIDQuery::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required bytes point_name = 2;
inline bool SearchPointsByIDQuery::has_point_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsByIDQuery::set_has_point_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsByIDQuery::clear_has_point_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsByIDQuery::clear_point_name() {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    point_name_->clear();
  }
  clear_has_point_name();
}
inline const ::std::string& SearchPointsByIDQuery::point_name() const {
  return *point_name_;
}
inline void SearchPointsByIDQuery::set_point_name(const ::std::string& value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsByIDQuery::set_point_name(const char* value) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(value);
}
inline void SearchPointsByIDQuery::set_point_name(const void* value, size_t size) {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  point_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsByIDQuery::mutable_point_name() {
  set_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    point_name_ = new ::std::string;
  }
  return point_name_;
}
inline ::std::string* SearchPointsByIDQuery::release_point_name() {
  clear_has_point_name();
  if (point_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = point_name_;
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsByIDQuery::set_allocated_point_name(::std::string* point_name) {
  if (point_name_ != &::google::protobuf::internal::kEmptyString) {
    delete point_name_;
  }
  if (point_name) {
    set_has_point_name();
    point_name_ = point_name;
  } else {
    clear_has_point_name();
    point_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 from_id = 3;
inline bool SearchPointsByIDQuery::has_from_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchPointsByIDQuery::set_has_from_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchPointsByIDQuery::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchPointsByIDQuery::clear_from_id() {
  from_id_ = 0;
  clear_has_from_id();
}
inline ::google::protobuf::int32 SearchPointsByIDQuery::from_id() const {
  return from_id_;
}
inline void SearchPointsByIDQuery::set_from_id(::google::protobuf::int32 value) {
  set_has_from_id();
  from_id_ = value;
}

// -------------------------------------------------------------------

// SearchPointsReply_PointInfo

// required int32 table_id = 1;
inline bool SearchPointsReply_PointInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsReply_PointInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsReply_PointInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsReply_PointInfo::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 SearchPointsReply_PointInfo::table_id() const {
  return table_id_;
}
inline void SearchPointsReply_PointInfo::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required bytes name = 2;
inline bool SearchPointsReply_PointInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchPointsReply_PointInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchPointsReply_PointInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchPointsReply_PointInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SearchPointsReply_PointInfo::name() const {
  return *name_;
}
inline void SearchPointsReply_PointInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchPointsReply_PointInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchPointsReply_PointInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPointsReply_PointInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SearchPointsReply_PointInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchPointsReply_PointInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 3;
inline bool SearchPointsReply_PointInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchPointsReply_PointInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchPointsReply_PointInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchPointsReply_PointInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SearchPointsReply_PointInfo::id() const {
  return id_;
}
inline void SearchPointsReply_PointInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// SearchPointsReply

// required int32 err = 1;
inline bool SearchPointsReply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchPointsReply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchPointsReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchPointsReply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 SearchPointsReply::err() const {
  return err_;
}
inline void SearchPointsReply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// repeated .Points.SearchPointsReply.PointInfo point_info_array = 2;
inline int SearchPointsReply::point_info_array_size() const {
  return point_info_array_.size();
}
inline void SearchPointsReply::clear_point_info_array() {
  point_info_array_.Clear();
}
inline const ::Points::SearchPointsReply_PointInfo& SearchPointsReply::point_info_array(int index) const {
  return point_info_array_.Get(index);
}
inline ::Points::SearchPointsReply_PointInfo* SearchPointsReply::mutable_point_info_array(int index) {
  return point_info_array_.Mutable(index);
}
inline ::Points::SearchPointsReply_PointInfo* SearchPointsReply::add_point_info_array() {
  return point_info_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Points::SearchPointsReply_PointInfo >&
SearchPointsReply::point_info_array() const {
  return point_info_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::Points::SearchPointsReply_PointInfo >*
SearchPointsReply::mutable_point_info_array() {
  return &point_info_array_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Points

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_points_2eproto__INCLUDED
